<?xml version="1.0" encoding="utf-8"?>
<search>
  
    
    <entry>
      <title><![CDATA[swift style guide]]></title>
      <url>%2F2017%2F04%2F08%2F2017-04-08-swift-style-guide%2F</url>
      <content type="text"><![CDATA[Make sure to read Apple’s API Design Guidelines.Specifics from these guidelines + additional remarks are mentioned below.This guide was last updated for Swift 3.0 on January 14th, 2017. Code Formatting Use 4 spaces for tabs. Avoid uncomfortably long lines with a hard maximum of 160 characters per line (Xcode->Preferences->Text Editing->Page guide at column: 160 is helpful for this) Ensure that there is a newline at the end of every file. Ensure that there is no trailing whitespace anywhere (Xcode->Preferences->Text Editing->Automatically trim trailing whitespace + Including whitespace-only lines). Do not place opening braces on new lines - we use the 1TBS style. 12345678910111213class SomeClass &#123; func someMethod() &#123; if x == y &#123; /* ... */ &#125; else if x == z &#123; /* ... */ &#125; else &#123; /* ... */ &#125; &#125; /* ... */&#125; When writing a type for a property, constant, variable, a key for a dictionary, a function argument, a protocol conformance, or a superclass, don’t add a space before the colon. 1234567891011121314151617181920212223242526// specifying typelet pirateViewController: PirateViewController// dictionary syntax (note that we left-align as opposed to aligning colons)let ninjaDictionary: [String: AnyObject] = [ "fightLikeDairyFarmer": false, "disgusting": true]// declaring a functionfunc myFunction&lt;T, U: SomeProtocol&gt;(firstArgument: U, secondArgument: T) where T.RelatedType == U &#123; /* ... */&#125;// calling a functionsomeFunction(someArgument: "Kitten")// superclassesclass PirateViewController: UIViewController &#123; /* ... */&#125;// protocolsextension PirateViewController: UITableViewDataSource &#123; /* ... */&#125; In general, there should be a space following a comma. 1let myArray = [1, 2, 3, 4, 5] There should be a space before and after a binary operator such as +, ==, or -&gt;. There should also not be a space after a ( and before a ). 1234567let myValue = 20 + (30 / 2) * 3if 1 + 1 == 3 &#123; fatalError("The universe is broken.")&#125;func pancake(with syrup: Syrup) -&gt; Pancake &#123; /* ... */&#125; We follow Xcode’s recommended indentation style (i.e. your code should not change if CTRL-I is pressed). When declaring a function that spans multiple lines, prefer using that syntax to which Xcode, as of version 7.3, defaults. 123456789101112131415// Xcode indentation for a function declaration that spans multiple linesfunc myFunctionWithManyParameters(parameterOne: String, parameterTwo: String, parameterThree: String) &#123; // Xcode indents to here for this kind of statement print("\(parameterOne) \(parameterTwo) \(parameterThree)")&#125;// Xcode indentation for a multi-line `if` statementif myFirstValue &gt; (mySecondValue + myThirdValue) &amp;&amp; myFourthValue == .someEnumValue &#123; // Xcode indents to here for this kind of statement print("Hello, World!")&#125; When calling a function that has many parameters, put each argument on a separate line with a single extra indentation. 1234someFunctionWithManyArguments( firstArgument: "Hello, I am a string", secondArgument: resultFromSomeFunction(), thirdArgument: someOtherLocalProperty) When dealing with an implicit array or dictionary large enough to warrant splitting it into multiple lines, treat the [ and ] as if they were braces in a method, if statement, etc. Closures in a method should be treated similarly. 12345678910111213someFunctionWithABunchOfArguments( someStringArgument: "hello I am a string", someArrayArgument: [ "dadada daaaa daaaa dadada daaaa daaaa dadada daaaa daaaa", "string one is crazy - what is it thinking?" ], someDictionaryArgument: [ "dictionary key 1": "some value 1, but also some more text here", "dictionary key 2": "some value 2" ], someClosure: &#123; parameter1 in print(parameter1) &#125;) Prefer using local constants or other mitigation techniques to avoid multi-line predicates where possible. 1234567891011121314// PREFERREDlet firstCondition = x == firstReallyReallyLongPredicateFunction()let secondCondition = y == secondReallyReallyLongPredicateFunction()let thirdCondition = z == thirdReallyReallyLongPredicateFunction()if firstCondition &amp;&amp; secondCondition &amp;&amp; thirdCondition &#123; // do something&#125;// NOT PREFERREDif x == firstReallyReallyLongPredicateFunction() &amp;&amp; y == secondReallyReallyLongPredicateFunction() &amp;&amp; z == thirdReallyReallyLongPredicateFunction() &#123; // do something&#125; Naming There is no need for Objective-C style prefixing in Swift (e.g. use just GuybrushThreepwood instead of LIGuybrushThreepwood). Use PascalCase for type names (e.g. struct, enum, class, typedef, associatedtype, etc.). Use camelCase (initial lowercase letter) for function, method, property, constant, variable, argument names, enum cases, etc.). When dealing with an acronym or other name that is usually written in all caps, actually use all caps in any names that use this in code. The exception is if this word is at the start of a name that needs to start with lowercase - in this case, use all lowercase for the acronym. 12345678// "HTML" is at the start of a constant name, so we use lowercase "html"let htmlBodyContent: String = "&lt;p&gt;Hello, World!&lt;/p&gt;"// Prefer using ID to Idlet profileID: Int = 1// Prefer URLFinder to UrlFinderclass URLFinder &#123; /* ... */&#125; All constants other than singletons that are instance-independent should be static. All such static constants should be placed in a container enum type as per rule 3.1.16. The naming of this container should be singular (e.g. Constant and not Constants) and it should be named such that it is relatively obvious that it is a constant container. If this is not obvious, you can add a Constant suffix to the name. You should use these containers to group constants that have similar or the same prefixes, suffixes and/or use cases. 12345678910111213141516171819class MyClassName &#123; // PREFERRED enum AccessibilityIdentifier &#123; static let pirateButton = "pirate_button" &#125; enum SillyMathConstant &#123; static let indianaPi = 3 &#125; static let shared = MyClassName() // NOT PREFERRED static let kPirateButtonAccessibilityIdentifier = "pirate_button" enum SillyMath &#123; static let indianaPi = 3 &#125; enum Singleton &#123; static let shared = MyClassName() &#125;&#125; For generics and associated types, use either a single capital letter or a PascalCase word that describes the generic. If this word clashes with a protocol that it conforms to or a superclass that it subclasses, you can append a Type suffix to the associated type or generic name. 12345678class SomeClass&lt;T&gt; &#123; /* ... */ &#125;class SomeClass&lt;Model&gt; &#123; /* ... */ &#125;protocol Modelable &#123; associatedtype Model&#125;protocol Sequence &#123; associatedtype IteratorType: Iterator&#125; Names should be descriptive and unambiguous. 12345// PREFERREDclass RoundAnimatingButton: UIButton &#123; /* ... */ &#125;// NOT PREFERREDclass CustomButton: UIButton &#123; /* ... */ &#125; Do not abbreviate, use shortened names, or single letter names. 123456789101112131415161718// PREFERREDclass RoundAnimatingButton: UIButton &#123; let animationDuration: NSTimeInterval func startAnimating() &#123; let firstSubview = subviews.first &#125;&#125;// NOT PREFERREDclass RoundAnimating: UIButton &#123; let aniDur: NSTimeInterval func srtAnmating() &#123; let v = subviews.first &#125;&#125; Include type information in constant or variable names when it is not obvious otherwise. 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364// PREFERREDclass ConnectionTableViewCell: UITableViewCell &#123; let personImageView: UIImageView let animationDuration: TimeInterval // it is ok not to include string in the ivar name here because it's obvious // that it's a string from the property name let firstName: String // though not preferred, it is OK to use `Controller` instead of `ViewController` let popupController: UIViewController let popupViewController: UIViewController // when working with a subclass of `UIViewController` such as a table view // controller, collection view controller, split view controller, etc., // fully indicate the type in the name. let popupTableViewController: UITableViewController // when working with outlets, make sure to specify the outlet type in the // property name. @IBOutlet weak var submitButton: UIButton! @IBOutlet weak var emailTextField: UITextField! @IBOutlet weak var nameLabel: UILabel!&#125;// NOT PREFERREDclass ConnectionTableViewCell: UITableViewCell &#123; // this isn't a `UIImage`, so shouldn't be called image // use personImageView instead let personImage: UIImageView // this isn't a `String`, so it should be `textLabel` let text: UILabel // `animation` is not clearly a time interval // use `animationDuration` or `animationTimeInterval` instead let animation: TimeInterval // this is not obviously a `String` // use `transitionText` or `transitionString` instead let transition: String // this is a view controller - not a view let popupView: UIViewController // as mentioned previously, we don't want to use abbreviations, so don't use // `VC` instead of `ViewController` let popupVC: UIViewController // even though this is still technically a `UIViewController`, this property // should indicate that we are working with a *Table* View Controller let popupViewController: UITableViewController // for the sake of consistency, we should put the type name at the end of the // property name and not at the start @IBOutlet weak var btnSubmit: UIButton! @IBOutlet weak var buttonSubmit: UIButton! // we should always have a type in the property name when dealing with outlets // for example, here, we should have `firstNameLabel` instead @IBOutlet weak var firstName: UILabel!&#125; When naming function arguments, make sure that the function can be read easily to understand the purpose of each argument. As per Apple’s API Design Guidelines, a protocol should be named as nouns if they describe what something is doing (e.g. Collection) and using the suffixes able, ible, or ing if it describes a capability (e.g. Equatable, ProgressReporting). If neither of those options makes sense for your use case, you can add a Protocol suffix to the protocol’s name as well. Some example protocols are below.123456789101112131415161718192021// here, the name is a noun that describes what the protocol doesprotocol TableViewSectionProvider &#123; func rowHeight(at row: Int) -&gt; CGFloat var numberOfRows: Int &#123; get &#125; /* ... */&#125;// here, the protocol is a capability, and we name it appropriatelyprotocol Loggable &#123; func logCurrentState() /* ... */&#125;// suppose we have an `InputTextView` class, but we also want a protocol// to generalize some of the functionality - it might be appropriate to// use the `Protocol` suffix hereprotocol InputTextViewProtocol &#123; func sendTrackingEvent() func inputText() -&gt; String /* ... */&#125; Coding StyleGeneral Prefer let to var whenever possible. Prefer the composition of map, filter, reduce, etc. over iterating when transforming from one collection to another. Make sure to avoid using closures that have side effects when using these methods. 123456789101112131415161718192021// PREFERREDlet stringOfInts = [1, 2, 3].flatMap &#123; String($0) &#125;// ["1", "2", "3"]// NOT PREFERREDvar stringOfInts: [String] = []for integer in [1, 2, 3] &#123; stringOfInts.append(String(integer))&#125;// PREFERREDlet evenNumbers = [4, 8, 15, 16, 23, 42].filter &#123; $0 % 2 == 0 &#125;// [4, 8, 16, 42]// NOT PREFERREDvar evenNumbers: [Int] = []for integer in [4, 8, 15, 16, 23, 42] &#123; if integer % 2 == 0 &#123; evenNumbers.append(integer) &#125;&#125; Prefer not declaring types for constants or variables if they can be inferred anyway. If a function returns multiple values, prefer returning a tuple to using inout arguments (it’s best to use labeled tuples for clarity on what you’re returning if it is not otherwise obvious). If you use a certain tuple more than once, consider using a typealias. If you’re returning 3 or more items in a tuple, consider using a struct or class instead. 1234567func pirateName() -&gt; (firstName: String, lastName: String) &#123; return ("Guybrush", "Threepwood")&#125;let name = pirateName()let firstName = name.firstNamelet lastName = name.lastName Be wary of retain cycles when creating delegates/protocols for your classes; typically, these properties should be declared weak. Be careful when calling self directly from an escaping closure as this can cause a retain cycle - use a capture list when this might be the case: 12345678910111213myFunctionWithEscapingClosure() &#123; [weak self] (error) -&gt; Void in // you can do this self?.doSomething() // or you can do this guard let strongSelf = self else &#123; return &#125; strongSelf.doSomething()&#125; Don’t use labeled breaks. Don’t place parentheses around control flow predicates. 123456789// PREFERREDif x == y &#123; /* ... */&#125;// NOT PREFERREDif (x == y) &#123; /* ... */&#125; Avoid writing out an enum type where possible - use shorthand. 12345// PREFERREDimageView.setImageWithURL(url, type: .person)// NOT PREFERREDimageView.setImageWithURL(url, type: AsyncImageView.Type.person) Don’t use shorthand for class methods since it is generally more difficult to infer the context from class methods as opposed to enums. 12345// PREFERREDimageView.backgroundColor = UIColor.white// NOT PREFERREDimageView.backgroundColor = .white Prefer not writing self. unless it is required. When writing methods, keep in mind whether the method is intended to be overridden or not. If not, mark it as final, though keep in mind that this will prevent the method from being overwritten for testing purposes. In general, final methods result in improved compilation times, so it is good to use this when applicable. Be particularly careful, however, when applying the final keyword in a library since it is non-trivial to change something to be non-final in a library as opposed to have changing something to be non-final in your local project. When using a statement such as else, catch, etc. that follows a block, put this keyword on the same line as the block. Again, we are following the 1TBS style here. Example if/else and do/catch code is below. 1234567891011if someBoolean &#123; // do something&#125; else &#123; // do something else&#125;do &#123; let fileContents = try readFile("filename.txt")&#125; catch &#123; print(error)&#125; Prefer static to class when declaring a function or property that is associated with a class as opposed to an instance of that class. Only use class if you specifically need the functionality of overriding that function or property in a subclass, though consider using a protocol to achieve this instead. If you have a function that takes no arguments, has no side effects, and returns some object or value, prefer using a computed property instead. For the purpose of namespacing a set of static functions and/or static properties, prefer using a caseless enum over a class or a struct. This way, you don’t have to add a private init() { } to the container.Access Modifiers Write the access modifier keyword first if it is needed. 12345// PREFERREDprivate static let myPrivateNumber: Int// NOT PREFERREDstatic private let myPrivateNumber: Int The access modifier keyword should not be on a line by itself - keep it inline with what it is describing. 12345678910// PREFERREDopen class Pirate &#123; /* ... */&#125;// NOT PREFERREDopenclass Pirate &#123; /* ... */&#125; In general, do not write the internal access modifier keyword since it is the default. If a property needs to be accessed by unit tests, you will have to make it internal to use @testable import ModuleName. If a property should be private, but you declare it to be internal for the purposes of unit testing, make sure you add an appropriate bit of documentation commenting that explains this. You can make use of the - warning: markup syntax for clarity as shown below. 12345/** This property defines the pirate's name. - warning: Not `private` for `@testable`. */let pirateName = "LeChuck" Prefer private to fileprivate where possible. When choosing between public and open, prefer open if you intend for something to be subclassable outside of a given module and public otherwise. Note that anything internal and above can be subclassed in tests by using @testable import, so this shouldn’t be a reason to use open. In general, lean towards being a bit more liberal with using open when it comes to libraries, but a bit more conservative when it comes to modules in a codebase such as an app where it is easy to change things in multiple modules simultaneously.Custom Operators Prefer creating named functions to custom operators. If you want to introduce a custom operator, make sure that you have a very good reason why you want to introduce a new operator into global scope as opposed to using some other construct. You can override existing operators to support new types (especially ==). However, your new definitions must preserve the semantics of the operator. For example, == must always test equality and return a boolean.Switch Statements and enums When using a switch statement that has a finite set of possibilities (enum), do NOT include a default case. Instead, place unused cases at the bottom and use the break keyword to prevent execution. Since switch cases in Swift break by default, do not include the break keyword if it is not needed. The case statements should line up with the switch statement itself as per default Swift standards. When defining a case that has an associated value, make sure that this value is appropriately labeled as opposed to just types (e.g. case Hunger(hungerLevel: Int) instead of case Hunger(Int)). 12345678910111213141516enum Problem &#123; case attitude case hair case hunger(hungerLevel: Int)&#125;func handleProblem(problem: Problem) &#123; switch problem &#123; case .attitude: print("At least I don't have a hair problem.") case .hair: print("Your barber didn't know when to stop.") case .hunger(let hungerLevel): print("The hunger level is \(hungerLevel).") &#125;&#125; Prefer lists of possibilities (e.g. case 1, 2, 3:) to using the fallthrough keyword where possible). If you have a default case that shouldn’t be reached, preferably throw an error (or handle it some other similar way such as asserting).12345678func handleDigit(_ digit: Int) throws &#123; switch digit &#123; case 0, 1, 2, 3, 4, 5, 6, 7, 8, 9: print("Yes, \(digit) is a digit!") default: throw Error(message: "The given number was not a digit.") &#125;&#125; Optionals The only time you should be using implicitly unwrapped optionals is with @IBOutlets. In every other case, it is better to use a non-optional or regular optional property. Yes, there are cases in which you can probably “guarantee” that the property will never be nil when used, but it is better to be safe and consistent. Similarly, don’t use force unwraps. Don’t use as! or try!. If you don’t plan on actually using the value stored in an optional, but need to determine whether or not this value is nil, explicitly check this value against nil as opposed to using if let syntax. 123456789// PREFEREREDif someOptional != nil &#123; // do something&#125;// NOT PREFERREDif let _ = someOptional &#123; // do something&#125; Don’t use unowned. You can think of unowned as somewhat of an equivalent of a weak property that is implicitly unwrapped (though unowned has slight performance improvements on account of completely ignoring reference counting). Since we don’t ever want to have implicit unwraps, we similarly don’t want unowned properties. 123456// PREFERREDweak var parentViewController: UIViewController?// NOT PREFERREDweak var parentViewController: UIViewController!unowned var parentViewController: UIViewController When unwrapping optionals, use the same name for the unwrapped constant or variable where appropriate. 123guard let myValue = myValue else &#123; return&#125; Protocols When implementing protocols, there are two ways of organizing your code: Using // MARK: comments to separate your protocol implementation from the rest of your code Using an extension outside your class/struct implementation code, but in the same source file Keep in mind that when using an extension, however, the methods in the extension can’t be overridden by a subclass, which can make testing difficult. If this is a common use case, it might be better to stick with method #1 for consistency. Otherwise, method #2 allows for cleaner separation of concerns. Even when using method #2, add // MARK: statements anyway for easier readability in Xcode’s method/property/class/etc. list UI.Properties If making a read-only, computed property, provide the getter without the get {} around it. 123456var computedProperty: String &#123; if someBool &#123; return "I'm a mighty pirate!" &#125; return "I'm selling these fine leather jackets."&#125; When using get {}, set {}, willSet, and didSet, indent these blocks. Though you can create a custom name for the new or old value for willSet/didSet and set, use the standard newValue/oldValue identifiers that are provided by default. 1234567891011121314151617181920var storedProperty: String = "I'm selling these fine leather jackets." &#123; willSet &#123; print("will set to \(newValue)") &#125; didSet &#123; print("did set from \(oldValue) to \(storedProperty)") &#125;&#125;var computedProperty: String &#123; get &#123; if someBool &#123; return "I'm a mighty pirate!" &#125; return storedProperty &#125; set &#123; storedProperty = newValue &#125;&#125; You can declare a singleton property as follows: 12345class PirateManager &#123; static let shared = PirateManager() /* ... */&#125; Closures If the types of the parameters are obvious, it is OK to omit the type name, but being explicit is also OK. Sometimes readability is enhanced by adding clarifying detail and sometimes by taking repetitive parts away - use your best judgment and be consistent. 123456789101112// omitting the typedoSomethingWithClosure() &#123; response in print(response)&#125;// explicit typedoSomethingWithClosure() &#123; response: NSURLResponse in print(response)&#125;// using shorthand in a map statement[1, 2, 3].flatMap &#123; String($0) &#125; If specifying a closure as a type, you don’t need to wrap it in parentheses unless it is required (e.g. if the type is optional or the closure is within another closure). Always wrap the arguments in the closure in a set of parentheses - use () to indicate no arguments and use Void to indicate that nothing is returned. 123456789let completionBlock: (Bool) -&gt; Void = &#123; (success) in print("Success? \(success)")&#125;let completionBlock: () -&gt; Void = &#123; print("Completed!")&#125;let completionBlock: (() -&gt; Void)? = nil Keep parameter names on same line as the opening brace for closures when possible without too much horizontal overflow (i.e. ensure lines are less than 160 characters). Use trailing closure syntax unless the meaning of the closure is not obvious without the parameter name (an example of this could be if a method has parameters for success and failure closures).1234567891011// trailing closuredoSomething(1.0) &#123; (parameter1) in print("Parameter 1 is \(parameter1)")&#125;// no trailing closuredoSomething(1.0, success: &#123; (parameter1) in print("Success with \(parameter1)")&#125;, failure: &#123; (parameter1) in print("Failure with \(parameter1)")&#125;) Arrays In general, avoid accessing an array directly with subscripts. When possible, use accessors such as .first or .last, which are optional and won’t crash. Prefer using a for item in items syntax when possible as opposed to something like for i in 0 ..&lt; items.count. If you need to access an array subscript directly, make sure to do proper bounds checking. You can use for (index, value) in items.enumerated() to get both the index and the value. Never use the += or + operator to append/concatenate to arrays. Instead, use .append() or .append(contentsOf:) as these are far more performant (at least with respect to compilation) in Swift’s current state. If you are declaring an array that is based on other arrays and want to keep it immutable, instead of let myNewArray = arr1 + arr2, use let myNewArray = [arr1, arr2].flatten().Error Handling Suppose a function myFunction is supposed to return a String, however, at some point it can run into an error. A common approach is to have this function return an optional String? where we return nil if something went wrong. Example: 123456789101112131415161718func readFile(named filename: String) -&gt; String? &#123; guard let file = openFile(named: filename) else &#123; return nil &#125; let fileContents = file.read() file.close() return fileContents&#125;func printSomeFile() &#123; let filename = "somefile.txt" guard let fileContents = readFile(named: filename) else &#123; print("Unable to open file \(filename).") return &#125; print(fileContents)&#125; Instead, we should be using Swift’s try/catch behavior when it is appropriate to know the reason for the failure. You can use a struct such as the following: 12345678910111213struct Error: Swift.Error &#123; public let file: StaticString public let function: StaticString public let line: UInt public let message: String public init(message: String, file: StaticString = #file, function: StaticString = #function, line: UInt = #line) &#123; self.file = file self.function = function self.line = line self.message = message &#125;&#125; Example usage: 123456789101112131415161718func readFile(named filename: String) throws -&gt; String &#123; guard let file = openFile(named: filename) else &#123; throw Error(message: "Unable to open file named \(filename).") &#125; let fileContents = file.read() file.close() return fileContents&#125;func printSomeFile() &#123; do &#123; let fileContents = try readFile(named: filename) print(fileContents) &#125; catch &#123; print(error) &#125;&#125; There are some exceptions in which it does make sense to use an optional as opposed to error handling. When the result should semantically potentially be nil as opposed to something going wrong while retrieving the result, it makes sense to return an optional instead of using error handling. In general, if a method can “fail”, and the reason for the failure is not immediately obvious if using an optional return type, it probably makes sense for the method to throw an error.Using guard Statements In general, we prefer to use an “early return” strategy where applicable as opposed to nesting code in if statements. Using guard statements for this use-case is often helpful and can improve the readability of the code. 123456789101112131415161718// PREFERREDfunc eatDoughnut(at index: Int) &#123; guard index &gt;= 0 &amp;&amp; index &lt; doughnuts.count else &#123; // return early because the index is out of bounds return &#125; let doughnut = doughnuts[index] eat(doughnut)&#125;// NOT PREFERREDfunc eatDoughnut(at index: Int) &#123; if index &gt;= 0 &amp;&amp; index &lt; doughnuts.count &#123; let doughnut = doughnuts[index] eat(doughnut) &#125;&#125; When unwrapping optionals, prefer guard statements as opposed to if statements to decrease the amount of nested indentation in your code. 12345678910111213141516171819// PREFERREDguard let monkeyIsland = monkeyIsland else &#123; return&#125;bookVacation(on: monkeyIsland)bragAboutVacation(at: monkeyIsland)// NOT PREFERREDif let monkeyIsland = monkeyIsland &#123; bookVacation(on: monkeyIsland) bragAboutVacation(at: monkeyIsland)&#125;// EVEN LESS PREFERREDif monkeyIsland == nil &#123; return&#125;bookVacation(on: monkeyIsland!)bragAboutVacation(at: monkeyIsland!) When deciding between using an if statement or a guard statement when unwrapping optionals is not involved, the most important thing to keep in mind is the readability of the code. There are many possible cases here, such as depending on two different booleans, a complicated logical statement involving multiple comparisons, etc., so in general, use your best judgement to write code that is readable and consistent. If you are unsure whether guard or if is more readable or they seem equally readable, prefer using guard. 1234567891011121314// an `if` statement is readable hereif operationFailed &#123; return&#125;// a `guard` statement is readable hereguard isSuccessful else &#123; return&#125;// double negative logic like this can get hard to read - i.e. don't do thisguard !operationFailed else &#123; return&#125; If choosing between two different states, it makes more sense to use an if statement as opposed to a guard statement. 1234567891011121314// PREFERREDif isFriendly &#123; print("Hello, nice to meet you!")&#125; else &#123; print("You have the manners of a beggar.")&#125;// NOT PREFERREDguard isFriendly else &#123; print("You have the manners of a beggar.") return&#125;print("Hello, nice to meet you!") You should also use guard only if a failure should result in exiting the current context. Below is an example in which it makes more sense to use two if statements instead of using two guards - we have two unrelated conditions that should not block one another. 1234567if let monkeyIsland = monkeyIsland &#123; bookVacation(onIsland: monkeyIsland)&#125;if let woodchuck = woodchuck, canChuckWood(woodchuck) &#123; woodchuck.chuckWood()&#125; Often, we can run into a situation in which we need to unwrap multiple optionals using guard statements. In general, combine unwraps into a single guard statement if handling the failure of each unwrap is identical (e.g. just a return, break, continue, throw, or some other @noescape). 12345678910111213141516171819// combined because we just returnguard let thingOne = thingOne, let thingTwo = thingTwo, let thingThree = thingThree else &#123; return&#125;// separate statements because we handle a specific error in each caseguard let thingOne = thingOne else &#123; throw Error(message: "Unwrapping thingOne failed.")&#125;guard let thingTwo = thingTwo else &#123; throw Error(message: "Unwrapping thingTwo failed.")&#125;guard let thingThree = thingThree else &#123; throw Error(message: "Unwrapping thingThree failed.")&#125; Don’t use one-liners for guard statements. 1234567// PREFERREDguard let thingOne = thingOne else &#123; return&#125;// NOT PREFERREDguard let thingOne = thingOne else &#123; return &#125; Documentation/CommentsDocumentationIf a function is more complicated than a simple O(1) operation, you should generally consider adding a doc comment for the function since there could be some information that the method signature does not make immediately obvious. If there are any quirks to the way that something was implemented, whether technically interesting, tricky, not obvious, etc., this should be documented. Documentation should be added for complex classes/structs/enums/protocols and properties. All public functions/classes/properties/constants/structs/enums/protocols/etc. should be documented as well (provided, again, that their signature/name does not make their meaning/functionality immediately obvious).After writing a doc comment, you should option click the function/property/class/etc. to make sure that everything is formatted correctly.Be sure to check out the full set of features available in Swift’s comment markup described in Apple’s Documentation.Guidelines: 160 character column limit (like the rest of the code). Even if the doc comment takes up one line, use block (/** */). Do not prefix each additional line with a *. Use the new - parameter syntax as opposed to the old :param: syntax (make sure to use lower case parameter and not Parameter). See the documentation on Swift Markup for more details on how this is formatted. If you’re going to be documenting the parameters/returns/throws of a method, document all of them, even if some of the documentation ends up being somewhat repetitive (this is preferable to having the documentation look incomplete). Sometimes, if only a single parameter warrants documentation, it might be better to just mention it in the description instead. For complicated classes, describe the usage of the class with some potential examples as seems appropriate. Remember that markdown syntax is valid in Swift’s comment docs. Newlines, lists, etc. are therefore appropriate. 12345678910111213141516171819202122232425262728/** ## Feature Support This class does some awesome things. It supports: - Feature 1 - Feature 2 - Feature 3 ## Examples Here is an example use case indented by four spaces because that indicates a code block: let myAwesomeThing = MyAwesomeClass() myAwesomeThing.makeMoney() ## Warnings There are some things you should be careful of: 1. Thing one 2. Thing two 3. Thing three */class MyAwesomeClass &#123; /* ... */&#125; When mentioning code, use code ticks - ` 1234567/** This does something with a `UIViewController`, perchance. - warning: Make sure that `someValue` is `true` before running this function. */func myFunction() &#123; /* ... */&#125; When writing doc comments, prefer brevity where possible. Other Commenting Guidelines Always leave a space after //. Always leave comments on their own line. When using // MARK: - whatever, leave a newline after the comment.12345678910111213class Pirate &#123; // MARK: - instance properties private let pirateName: String // MARK: - initialization init() &#123; /* ... */ &#125;&#125;]]></content>
    </entry>

    
  
  
</search>
