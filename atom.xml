<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Guangfeng&#39;s Blog</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-04-09T03:03:30.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Guangfeng Wang</name>
    <email>guangfeng@live.cn</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Android Code Style Guide</title>
    <link href="http://yoursite.com/2017/04/09/2017-04-09-Android-Code-Style-Guide/"/>
    <id>http://yoursite.com/2017/04/09/2017-04-09-Android-Code-Style-Guide/</id>
    <published>2017-04-09T02:56:14.000Z</published>
    <updated>2017-04-09T03:03:30.000Z</updated>
    
    <content type="html"><![CDATA[<p>This is <a href="https://source.android.com/source/code-style.html" target="_blank" rel="external">Android Code Style for Contributors</a>.<br>The code styles below are strict rules, not guidelines or recommendations. Contributions to Android that do not adhere to these rules are generally not accepted. We recognize that not all existing code follows these rules, but we expect all new code to be compliant.</p>
<h2 id="Java-Language-Rules"><a href="#Java-Language-Rules" class="headerlink" title="Java Language Rules"></a>Java Language Rules</h2><p>Android follows standard Java coding conventions with the additional rules described below.</p>
<h3 id="Don’t-Ignore-Exceptions"><a href="#Don’t-Ignore-Exceptions" class="headerlink" title="Don’t Ignore Exceptions"></a>Don’t Ignore Exceptions</h3><p>It can be tempting to write code that completely ignores an exception, such as:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">setServerPort</span><span class="params">(String value)</span> </span>&#123;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        serverPort = Integer.parseInt(value);</div><div class="line">    &#125; <span class="keyword">catch</span> (NumberFormatException e) &#123; &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>Do not do this. While you may think your code will never encounter this error condition or that it is not important to handle it, ignoring exceptions as above creates mines in your code for someone else to trigger some day. You must handle every Exception in your code in a principled way; the specific handling varies depending on the case.<br>Anytime somebody has an empty catch clause they should have a creepy feeling. There are definitely times when it is actually the correct thing to do, but at least you have to think about it. In Java you can’t escape the creepy feeling. -<a href="http://www.artima.com/intv/solid4.html" target="_blank" rel="external">James Gosling</a><br>Acceptable alternatives (in order of preference) are:</p>
<ul>
<li><p>Throw the exception up to the caller of your method.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">setServerPort</span><span class="params">(String value)</span> <span class="keyword">throws</span> NumberFormatException </span>&#123;</div><div class="line">    serverPort = Integer.parseInt(value);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>Throw a new exception that’s appropriate to your level of abstraction.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">setServerPort</span><span class="params">(String value)</span> <span class="keyword">throws</span> ConfigurationException </span>&#123;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        serverPort = Integer.parseInt(value);</div><div class="line">    &#125; <span class="keyword">catch</span> (NumberFormatException e) &#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ConfigurationException(<span class="string">"Port "</span> + value + <span class="string">" is not valid."</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>Handle the error gracefully and substitute an appropriate value in the catch {} block.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/** Set port. If value is not a valid number, 80 is substituted. */</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">setServerPort</span><span class="params">(String value)</span> </span>&#123;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        serverPort = Integer.parseInt(value);</div><div class="line">    &#125; <span class="keyword">catch</span> (NumberFormatException e) &#123;</div><div class="line">        serverPort = <span class="number">80</span>;  <span class="comment">// default port for server</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>Catch the Exception and throw a new <code>RuntimeException</code>. This is dangerous, so do it only if you are positive that if this error occurs the appropriate thing to do is crash.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/** Set port. If value is not a valid number, die. */</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">setServerPort</span><span class="params">(String value)</span> </span>&#123;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        serverPort = Integer.parseInt(value);</div><div class="line">    &#125; <span class="keyword">catch</span> (NumberFormatException e) &#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"port "</span> + value <span class="string">" is invalid, "</span>, e);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<blockquote>
<p>Note The original exception is passed to the constructor for RuntimeException. If your code must compile under Java 1.3, you must omit the exception that is the cause.</p>
</blockquote>
<ul>
<li>As a last resort, if you are confident that ignoring the exception is appropriate then you may ignore it, but you must also comment why with a good reason:<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/** If value is not a valid number, original port number is used. */</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">setServerPort</span><span class="params">(String value)</span> </span>&#123;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        serverPort = Integer.parseInt(value);</div><div class="line">    &#125; <span class="keyword">catch</span> (NumberFormatException e) &#123;</div><div class="line">        <span class="comment">// Method is documented to just ignore invalid user input.</span></div><div class="line">        <span class="comment">// serverPort will just be unchanged.</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="Don’t-Catch-Generic-Exception"><a href="#Don’t-Catch-Generic-Exception" class="headerlink" title="Don’t Catch Generic Exception"></a>Don’t Catch Generic Exception</h3><p>It can also be tempting to be lazy when catching exceptions and do something like this:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">    someComplicatedIOFunction();        <span class="comment">// may throw IOException</span></div><div class="line">    someComplicatedParsingFunction();   <span class="comment">// may throw ParsingException</span></div><div class="line">    someComplicatedSecurityFunction();  <span class="comment">// may throw SecurityException</span></div><div class="line">    <span class="comment">// phew, made it all the way</span></div><div class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;                 <span class="comment">// I'll just catch all exceptions</span></div><div class="line">    handleError();                      <span class="comment">// with one generic handler!</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>Do not do this. In almost all cases it is inappropriate to catch generic Exception or Throwable (preferably not Throwable because it includes Error exceptions). It is very dangerous because it means that Exceptions you never expected (including RuntimeExceptions like ClassCastException) get caught in application-level error handling. It obscures the failure handling properties of your code, meaning if someone adds a new type of Exception in the code you’re calling, the compiler won’t help you realize you need to handle the error differently. In most cases you shouldn’t be handling different types of exception the same way.<br>The rare exception to this rule is test code and top-level code where you want to catch all kinds of errors (to prevent them from showing up in a UI, or to keep a batch job running). In these cases you may catch generic Exception (or Throwable) and handle the error appropriately. Think very carefully before doing this, though, and put in comments explaining why it is safe in this place.<br>Alternatives to catching generic Exception:</p>
<ul>
<li>Catch each exception separately as separate catch blocks after a single try. This can be awkward but is still preferable to catching all Exceptions. Beware repeating too much code in the catch blocks.</li>
<li>Refactor your code to have more fine-grained error handling, with multiple try blocks. Split up the IO from the parsing, handle errors separately in each case.</li>
<li>Rethrow the exception. Many times you don’t need to catch the exception at this level anyway, just let the method throw it.<br>Remember: exceptions are your friend! When the compiler complains you’re not catching an exception, don’t scowl. Smile: the compiler just made it easier for you to catch runtime problems in your code.<h3 id="Don’t-Use-Finalizers"><a href="#Don’t-Use-Finalizers" class="headerlink" title="Don’t Use Finalizers"></a>Don’t Use Finalizers</h3>Finalizers are a way to have a chunk of code executed when an object is garbage collected. While they can be handy for doing cleanup (particularly of external resources), there are no guarantees as to when a finalizer will be called (or even that it will be called at all).<br>Android doesn’t use finalizers. In most cases, you can do what you need from a finalizer with good exception handling. If you absolutely need it, define a close() method (or the like) and document exactly when that method needs to be called (see InputStream for an example). In this case it is appropriate but not required to print a short log message from the finalizer, as long as it is not expected to flood the logs.<h3 id="Fully-Qualify-Imports"><a href="#Fully-Qualify-Imports" class="headerlink" title="Fully Qualify Imports"></a>Fully Qualify Imports</h3>When you want to use class Bar from package foo,there are two possible ways to import it:</li>
<li><code>import foo.*;</code><br>  Potentially reduces the number of import statements.</li>
<li><code>import foo.Bar;</code><br>  Makes it obvious what classes are actually used and the code is more readable for maintainers.<br>Use <code>import foo.Bar;</code> for importing all Android code. An explicit exception is made for java standard libraries (<code>java.util.*</code>, <code>java.io.*</code>, etc.) and unit test code (<code>junit.framework.*</code>).</li>
</ul>
<h2 id="Java-Library-Rules"><a href="#Java-Library-Rules" class="headerlink" title="Java Library Rules"></a>Java Library Rules</h2><p>There are conventions for using Android’s Java libraries and tools. In some cases, the convention has changed in important ways and older code might use a deprecated pattern or library. When working with such code, it’s okay to continue the existing style. When creating new components however, never use deprecated libraries.</p>
<h2 id="Java-Style-Rules"><a href="#Java-Style-Rules" class="headerlink" title="Java Style Rules"></a>Java Style Rules</h2><h3 id="Use-Javadoc-Standard-Comments"><a href="#Use-Javadoc-Standard-Comments" class="headerlink" title="Use Javadoc Standard Comments"></a>Use Javadoc Standard Comments</h3><p>Every file should have a copyright statement at the top, followed by package and import statements (each block separated by a blank line) and finally the class or interface declaration. In the Javadoc comments, describe what the class or interface does.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line"> * Copyright (C) 2015 The Android Open Source Project</div><div class="line"> *</div><div class="line"> * Licensed under the Apache License, Version 2.0 (the "License");</div><div class="line"> * you may not use this file except in compliance with the License.</div><div class="line"> * You may obtain a copy of the License at</div><div class="line"> *</div><div class="line"> *      http://www.apache.org/licenses/LICENSE-2.0</div><div class="line"> *</div><div class="line"> * Unless required by applicable law or agreed to in writing, software</div><div class="line"> * distributed under the License is distributed on an "AS IS" BASIS,</div><div class="line"> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</div><div class="line"> * See the License for the specific language governing permissions and</div><div class="line"> * limitations under the License.</div><div class="line"> */</div><div class="line"></div><div class="line"><span class="keyword">package</span> com.android.internal.foo;</div><div class="line"></div><div class="line"><span class="keyword">import</span> android.os.Blah;</div><div class="line"><span class="keyword">import</span> android.view.Yada;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.sql.ResultSet;</div><div class="line"><span class="keyword">import</span> java.sql.SQLException;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Does X and Y and provides an abstraction for Z.</div><div class="line"> */</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Foo</span> </span>&#123;</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>Every class and nontrivial public method you write must contain a Javadoc comment with at least one sentence describing what the class or method does. This sentence should start with a third person descriptive verb.<br>Examples:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/** Returns the correctly rounded positive square root of a double value. */</span></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">double</span> <span class="title">sqrt</span><span class="params">(<span class="keyword">double</span> a)</span> </span>&#123;</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Or<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Constructs a new String by converting the specified array of</div><div class="line"> * bytes using the platform's default character encoding.</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">String</span><span class="params">(<span class="keyword">byte</span>[] bytes)</span> </span>&#123;</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>You do not need to write Javadoc for trivial get and set methods such as setFoo() if all your Javadoc would say is “sets Foo”. If the method does something more complex (such as enforcing a constraint or has an important side effect), then you must document it. If it’s not obvious what the property “Foo” means, you should document it.<br>Every method you write, public or otherwise, would benefit from Javadoc. Public methods are part of an API and therefore require Javadoc. Android does not currently enforce a specific style for writing Javadoc comments, but you should follow the instructions <a href="http://www.oracle.com/technetwork/java/javase/documentation/index-137868.html" target="_blank" rel="external">How to Write Doc Comments for the Javadoc Tool</a>.</p>
<h3 id="Write-Short-Methods"><a href="#Write-Short-Methods" class="headerlink" title="Write Short Methods"></a>Write Short Methods</h3><p>When feasible, keep methods small and focused. We recognize that long methods are sometimes appropriate, so no hard limit is placed on method length. If a method exceeds 40 lines or so, think about whether it can be broken up without harming the structure of the program.</p>
<h3 id="Define-Fields-in-Standard-Places"><a href="#Define-Fields-in-Standard-Places" class="headerlink" title="Define Fields in Standard Places"></a>Define Fields in Standard Places</h3><p>Define fields either at the top of the file or immediately before the methods that use them.</p>
<h3 id="Limit-Variable-Scope"><a href="#Limit-Variable-Scope" class="headerlink" title="Limit Variable Scope"></a>Limit Variable Scope</h3><p>Keep the scope of local variables to a minimum. By doing so, you increase the readability and maintainability of your code and reduce the likelihood of error. Each variable should be declared in the innermost block that encloses all uses of the variable.<br>Local variables should be declared at the point they are first used. Nearly every local variable declaration should contain an initializer. If you don’t yet have enough information to initialize a variable sensibly, postpone the declaration until you do.<br>The exception is try-catch statements. If a variable is initialized with the return value of a method that throws a checked exception, it must be initialized inside a try block. If the value must be used outside of the try block, then it must be declared before the try block, where it cannot yet be sensibly initialized:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Instantiate class cl, which represents some sort of Set</span></div><div class="line">Set s = <span class="keyword">null</span>;</div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">    s = (Set) cl.newInstance();</div><div class="line">&#125; <span class="keyword">catch</span>(IllegalAccessException e) &#123;</div><div class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(cl + <span class="string">" not accessible"</span>);</div><div class="line">&#125; <span class="keyword">catch</span>(InstantiationException e) &#123;</div><div class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(cl + <span class="string">" not instantiable"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// Exercise the set</span></div><div class="line">s.addAll(Arrays.asList(args));</div></pre></td></tr></table></figure></p>
<p>However, even this case can be avoided by encapsulating the try-catch block in a method:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function">Set <span class="title">createSet</span><span class="params">(Class cl)</span> </span>&#123;</div><div class="line">    <span class="comment">// Instantiate class cl, which represents some sort of Set</span></div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        <span class="keyword">return</span> (Set) cl.newInstance();</div><div class="line">    &#125; <span class="keyword">catch</span>(IllegalAccessException e) &#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(cl + <span class="string">" not accessible"</span>);</div><div class="line">    &#125; <span class="keyword">catch</span>(InstantiationException e) &#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(cl + <span class="string">" not instantiable"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">...</div><div class="line"></div><div class="line"><span class="comment">// Exercise the set</span></div><div class="line">Set s = createSet(cl);</div><div class="line">s.addAll(Arrays.asList(args));</div></pre></td></tr></table></figure></p>
<p>Loop variables should be declared in the for statement itself unless there is a compelling reason to do otherwise:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</div><div class="line">    doSomething(i);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>and<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> (Iterator i = c.iterator(); i.hasNext(); ) &#123;</div><div class="line">    doSomethingElse(i.next());</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="Order-Import-Statements"><a href="#Order-Import-Statements" class="headerlink" title="Order Import Statements"></a>Order Import Statements</h3><p>The ordering of import statements is:</p>
<ol>
<li>Android imports</li>
<li>Imports from third parties (<code>com</code>, <code>junit</code>, <code>net</code>, <code>org</code>)</li>
<li><code>java</code> and <code>javax</code><br>To exactly match the IDE settings, the imports should be:</li>
</ol>
<ul>
<li>Alphabetical within each grouping, with capital letters before lower case letters (e.g. Z before a).</li>
<li>Separated by a blank line between each major grouping (<code>android</code>, <code>com</code>, <code>junit</code>, <code>net</code>, <code>org</code>, <code>java</code>, <code>javax</code>).<br>Originally, there was no style requirement on the ordering, meaning IDEs were either always changing the ordering or IDE developers had to disable the automatic import management features and manually maintain the imports. This was deemed bad. When java-style was asked, the preferred styles varied wildly and it came down to Android needing to simply “pick an ordering and be consistent.” So we chose a style, updated the style guide, and made the IDEs obey it. We expect that as IDE users work on the code, imports in all packages will match this pattern without extra engineering effort.<br>This style was chosen such that:</li>
<li>The imports people want to look at first tend to be at the top (<code>android</code>).</li>
<li>The imports people want to look at least tend to be at the bottom (<code>java</code>).</li>
<li>Humans can easily follow the style.</li>
<li>IDEs can follow the style.<br>The use and location of static imports have been mildly controversial issues. Some people prefer static imports to be interspersed with the remaining imports, while some prefer them to reside above or below all other imports. Additionally, we have not yet determined how to make all IDEs use the same ordering. Since many consider this a low priority issue, just use your judgement and be consistent.<h3 id="Use-Spaces-for-Indentation"><a href="#Use-Spaces-for-Indentation" class="headerlink" title="Use Spaces for Indentation"></a>Use Spaces for Indentation</h3>We use four (4) space indents for blocks and never tabs. When in doubt, be consistent with the surrounding code.<br>We use eight (8) space indents for line wraps, including function calls and assignments. For example, this is correct:<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Instrument i =</div><div class="line">        someLongExpression(that, wouldNotFit, on, one, line);</div></pre></td></tr></table></figure>
</li>
</ul>
<p>and this is not correct:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Instrument i =</div><div class="line">    someLongExpression(that, wouldNotFit, on, one, line);</div></pre></td></tr></table></figure></p>
<h3 id="Follow-Field-Naming-Conventions"><a href="#Follow-Field-Naming-Conventions" class="headerlink" title="Follow Field Naming Conventions"></a>Follow Field Naming Conventions</h3><ul>
<li>Non-public, non-static field names start with m.</li>
<li>Static field names start with s.</li>
<li>Other fields start with a lower case letter.</li>
<li>Public static final fields (constants) are ALL_CAPS_WITH_UNDERSCORES.<br>For example:<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyClass</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> SOME_CONSTANT = <span class="number">42</span>;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">int</span> publicField;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> MyClass sSingleton;</div><div class="line">    <span class="keyword">int</span> mPackagePrivate;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mPrivate;</div><div class="line">    <span class="keyword">protected</span> <span class="keyword">int</span> mProtected;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="Use-Standard-Brace-Style"><a href="#Use-Standard-Brace-Style" class="headerlink" title="Use Standard Brace Style"></a>Use Standard Brace Style</h3><p>Braces do not go on their own line; they go on the same line as the code before them:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">func</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (something) &#123;</div><div class="line">            <span class="comment">// ...</span></div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (somethingElse) &#123;</div><div class="line">            <span class="comment">// ...</span></div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="comment">// ...</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>We require braces around the statements for a conditional. Exception: If the entire conditional (the condition and the body) fit on one line, you may (but are not obligated to) put it all on one line. For example, this is acceptable:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (condition) &#123;</div><div class="line">    body();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>and this is acceptable:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (condition) body();</div></pre></td></tr></table></figure></p>
<p>but this is not acceptable:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (condition)</div><div class="line">    body();  <span class="comment">// bad!</span></div></pre></td></tr></table></figure></p>
<h3 id="Limit-Line-Length"><a href="#Limit-Line-Length" class="headerlink" title="Limit Line Length"></a>Limit Line Length</h3><p>Each line of text in your code should be at most 100 characters long. While much discussion has surrounded this rule, the decision remains that 100 characters is the maximum with the following exceptions:</p>
<ul>
<li>If a comment line contains an example command or a literal URL longer than 100 characters, that line may be longer than 100 characters for ease of cut and paste.</li>
<li>Import lines can go over the limit because humans rarely see them (this also simplifies tool writing).<h3 id="Use-Standard-Java-Annotations"><a href="#Use-Standard-Java-Annotations" class="headerlink" title="Use Standard Java Annotations"></a>Use Standard Java Annotations</h3>Annotations should precede other modifiers for the same language element. Simple marker annotations (e.g. @Override) can be listed on the same line with the language element. If there are multiple annotations, or parameterized annotations, they should each be listed one-per-line in alphabetical order.<br>Android standard practices for the three predefined annotations in Java are:</li>
<li><code>@Deprecated</code>: The @Deprecated annotation must be used whenever the use of the annotated element is discouraged. If you use the @Deprecated annotation, you must also have a @deprecated Javadoc tag and it should name an alternate implementation. In addition, remember that a @Deprecated method is still supposed to work. If you see old code that has a @deprecated Javadoc tag, please add the @Deprecated annotation.</li>
<li><code>@Override</code>: The @Override annotation must be used whenever a method overrides the declaration or implementation from a super-class. For example, if you use the @inheritdocs Javadoc tag, and derive from a class (not an interface), you must also annotate that the method @Overrides the parent class’s method.</li>
<li><code>@SuppressWarnings</code>: The @SuppressWarnings annotation should be used only under circumstances where it is impossible to eliminate a warning. If a warning passes this “impossible to eliminate” test, the @SuppressWarnings annotation must be used, so as to ensure that all warnings reflect actual problems in the code. When a @SuppressWarnings annotation is necessary, it must be prefixed with a TODO comment that explains the “impossible to eliminate” condition. This will normally identify an offending class that has an awkward interface. For example:<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// <span class="doctag">TODO:</span> The third-party class com.third.useful.Utility.rotate() needs generics</span></div><div class="line"><span class="meta">@SuppressWarnings</span>(<span class="string">"generic-cast"</span>)</div><div class="line">List&lt;String&gt; blix = Utility.rotate(blax);</div></pre></td></tr></table></figure>
</li>
</ul>
<p>When a @SuppressWarnings annotation is required, the code should be refactored to isolate the software elements where the annotation applies.</p>
<h3 id="Treat-Acronyms-as-Words"><a href="#Treat-Acronyms-as-Words" class="headerlink" title="Treat Acronyms as Words"></a>Treat Acronyms as Words</h3><p>Treat acronyms and abbreviations as words in naming variables, methods, and classes to make names more readable:<br>| Good | Bad |<br>| :—– | :—— |<br>| XmlHttpRequest | XMLHTTPRequest |<br>| getCustomerId | getCustomerID |<br>| class Html | class HTML |<br>| String url | String URL |<br>| long id | long ID |<br>As both the JDK and the Android code bases are very inconsistent around acronyms, it is virtually impossible to be consistent with the surrounding code. Therefore, always treat acronyms as words.</p>
<h3 id="Use-TODO-Comments"><a href="#Use-TODO-Comments" class="headerlink" title="Use TODO Comments"></a>Use TODO Comments</h3><p>Use TODO comments for code that is temporary, a short-term solution, or good-enough but not perfect. TODOs should include the string TODO in all caps, followed by a colon:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// <span class="doctag">TODO:</span> Remove this code after the UrlTable2 has been checked in.</span></div></pre></td></tr></table></figure></p>
<p>and<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// <span class="doctag">TODO:</span> Change this to use a flag instead of a constant.</span></div></pre></td></tr></table></figure></p>
<h3 id="Log-Sparingly"><a href="#Log-Sparingly" class="headerlink" title="Log Sparingly"></a>Log Sparingly</h3><p>While logging is necessary, it has a significantly negative impact on performance and quickly loses its usefulness if not kept reasonably terse. The logging facilities provides five different levels of logging:</p>
<ul>
<li><code>ERROR</code>: Use when something fatal has happened, i.e. something will have user-visible consequences and won’t be recoverable without explicitly deleting some data, uninstalling applications, wiping the data partitions or reflashing the entire device (or worse). This level is always logged. Issues that justify some logging at the ERROR level are typically good candidates to be reported to a statistics-gathering server.</li>
<li><code>WARNING</code>: Use when something serious and unexpected happened, i.e. something that will have user-visible consequences but is likely to be recoverable without data loss by performing some explicit action, ranging from waiting or restarting an app all the way to re-downloading a new version of an application or rebooting the device. This level is always logged. Issues that justify some logging at the WARNING level might also be considered for reporting to a statistics-gathering server.</li>
<li><code>INFORMATIVE</code>: Use to note that something interesting to most people happened, i.e. when a situation is detected that is likely to have widespread impact, though isn’t necessarily an error. Such a condition should only be logged by a module that reasonably believes that it is the most authoritative in that domain (to avoid duplicate logging by non-authoritative components). This level is always logged.</li>
<li><code>DEBUG</code>: Use to further note what is happening on the device that could be relevant to investigate and debug unexpected behaviors. You should log only what is needed to gather enough information about what is going on about your component. If your debug logs are dominating the log then you probably should be using verbose logging. This level will be logged, even on release builds, and is required to be surrounded by an <code>if (LOCAL_LOG)</code> or <code>if (LOCAL_LOGD)</code> block, where <code>LOCAL_LOG[D]</code> is defined in your class or subcomponent, so that there can exist a possibility to disable all such logging. There must therefore be no active logic in an <code>if (LOCAL_LOG)</code> block. All the string building for the log also needs to be placed inside the <code>if (LOCAL_LOG)</code> block. The logging call should not be re-factored out into a method call if it is going to cause the string building to take place outside of the <code>if (LOCAL_LOG)</code> block.<br>  There is some code that still says <code>if (localLOGV)</code>. This is considered acceptable as well, although the name is nonstandard.</li>
<li><code>VERBOSE</code>: Use for everything else. This level will only be logged on debug builds and should be surrounded by an <code>if (LOCAL_LOGV)</code> block (or equivalent) so it can be compiled out by default. Any string building will be stripped out of release builds and needs to appear inside the <code>if (LOCAL_LOGV)</code> block.<br>Notes:</li>
<li>Within a given module, other than at the VERBOSE level, an error should only be reported once if possible. Within a single chain of function calls within a module, only the innermost function should return the error, and callers in the same module should only add some logging if that significantly helps to isolate the issue.</li>
<li>In a chain of modules, other than at the VERBOSE level, when a lower-level module detects invalid data coming from a higher-level module, the lower-level module should only log this situation to the DEBUG log, and only if logging provides information that is not otherwise available to the caller. Specifically, there is no need to log situations where an exception is thrown (the exception should contain all the relevant information), or where the only information being logged is contained in an error code. This is especially important in the interaction between the framework and applications, and conditions caused by third-party applications that are properly handled by the framework should not trigger logging higher than the DEBUG level. The only situations that should trigger logging at the INFORMATIVE level or higher is when a module or application detects an error at its own level or coming from a lower level.</li>
<li>When a condition that would normally justify some logging is likely to occur many times, it can be a good idea to implement some rate-limiting mechanism to prevent overflowing the logs with many duplicate copies of the same (or very similar) information.</li>
<li>Losses of network connectivity are considered common, fully expected, and should not be logged gratuitously. A loss of network connectivity that has consequences within an app should be logged at the DEBUG or VERBOSE level (depending on whether the consequences are serious enough and unexpected enough to be logged in a release build).</li>
<li>Having a full filesystem on a filesystem that is accessible to or on behalf of third-party applications should not be logged at a level higher than INFORMATIVE.</li>
<li>Invalid data coming from any untrusted source (including any file on shared storage, or data coming through just about any network connection) is considered expected and should not trigger any logging at a level higher than DEBUG when it’s detected to be invalid (and even then logging should be as limited as possible).</li>
<li>Keep in mind that the <code>+</code> operator, when used on Strings, implicitly creates a <code>StringBuilder</code> with the default buffer size (16 characters) and potentially other temporary String objects, i.e. that explicitly creating StringBuilders isn’t more expensive than relying on the default ‘+’ operator (and can be a lot more efficient in fact). Keep in mind that code that calls <code>Log.v()</code> is compiled and executed on release builds, including building the strings, even if the logs aren’t being read.</li>
<li>Any logging that is meant to be read by other people and to be available in release builds should be terse without being cryptic, and should be reasonably understandable. This includes all logging up to the DEBUG level.</li>
<li>When possible, logging should be kept on a single line if it makes sense. Line lengths up to 80 or 100 characters are perfectly acceptable, while lengths longer than about 130 or 160 characters (including the length of the tag) should be avoided if possible.</li>
<li>Logging that reports successes should never be used at levels higher than VERBOSE.</li>
<li>Temporary logging used to diagnose an issue that is hard to reproduce should be kept at the DEBUG or VERBOSE level and should be enclosed by if blocks that allow for disabling it entirely at compile time.</li>
<li>Be careful about security leaks through the log. Private information should be avoided. Information about protected content must definitely be avoided. This is especially important when writing framework code as it’s not easy to know in advance what will and will not be private information or protected content.</li>
<li><code>System.out.println()</code> (or <code>printf()</code> for native code) should never be used. System.out and System.err get redirected to /dev/null, so your print statements will have no visible effects. However, all the string building that happens for these calls still gets executed.</li>
<li>The golden rule of logging is that your logs may not unnecessarily push other logs out of the buffer, just as others may not push out yours.<h3 id="Be-Consistent"><a href="#Be-Consistent" class="headerlink" title="Be Consistent"></a>Be Consistent</h3>Our parting thought: BE CONSISTENT. If you’re editing code, take a few minutes to look at the surrounding code and determine its style. If that code uses spaces around the if clauses, you should too. If the code comments have little boxes of stars around them, make your comments have little boxes of stars around them too.<br>The point of having style guidelines is to have a common vocabulary of coding, so people can concentrate on what you’re saying, rather than on how you’re saying it. We present global style rules here so people know the vocabulary, but local style is also important. If the code you add to a file looks drastically different from the existing code around it, it throws readers out of their rhythm when they go to read it. Try to avoid this.<h2 id="Javatests-Style-Rules"><a href="#Javatests-Style-Rules" class="headerlink" title="Javatests Style Rules"></a>Javatests Style Rules</h2>Follow test method naming conventions and use an underscore to separate what is being tested from the specific case being tested. This style makes it easier to see exactly what cases are being tested. For example:<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">testMethod_specificCase1 testMethod_specificCase2</div><div class="line"></div><div class="line">void testIsDistinguishable_protanopia() &#123;</div><div class="line">    ColorMatcher colorMatcher = new ColorMatcher(PROTANOPIA)</div><div class="line">    assertFalse(colorMatcher.isDistinguishable(Color.RED, Color.BLACK))</div><div class="line">    assertTrue(colorMatcher.isDistinguishable(Color.X, Color.Y))</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;This is &lt;a href=&quot;https://source.android.com/source/code-style.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android Code Style for Contributors&lt;/a
    
    </summary>
    
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Google Objective-C Style Guide</title>
    <link href="http://yoursite.com/2017/04/08/2017-04-08-Google-Objective-C-Style-Guide/"/>
    <id>http://yoursite.com/2017/04/08/2017-04-08-Google-Objective-C-Style-Guide/</id>
    <published>2017-04-08T15:16:09.000Z</published>
    <updated>2017-04-08T17:23:10.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>This is <a href="https://google.github.io/styleguide/objcguide.xml" target="_blank" rel="external">Google Objective-C Style Guide</a>.</strong></p>
<h2 id="Background"><a href="#Background" class="headerlink" title="Background"></a>Background</h2><p>Objective-C is a very dynamic, object-oriented extension of C. It’s designed to be easy to use and read, while enabling sophisticated object-oriented design. It is the primary development language for new applications on Mac OS X and the iPhone.<br>Cocoa is one of the main application frameworks on Mac OS X. It is a collection of Objective-C classes that provide for rapid development of full-featured Mac OS X applications.<br>Apple has already written a very good, and widely accepted, coding guide for Objective-C. Google has also written a similar guide for C++. This Objective-C guide aims to be a very natural combination of Apple’s and Google’s general recommendations. So, before reading this guide, please make sure you’ve read:</p>
<ul>
<li><a href="https://developer.apple.com/documentation/Cocoa/Conceptual/CodingGuidelines/index.html" target="_blank" rel="external">Apple’s Cocoa Coding Guidelines</a></li>
<li><a href="https://google-styleguide.googlecode.com/svn/trunk/cppguide.xml" target="_blank" rel="external">Google’s Open Source C ++ Style Guide</a></li>
</ul>
<p>The purpose of this document is to describe the Objective-C (and Objective-C++) coding guidelines and practices that should be used for all Mac OS X code. Many of these guidelines have evolved and been proven over time on other projects and teams. Open-source projects developed by Google conform to the requirements in this guide.<br>Note that this guide is not an Objective-C tutorial. We assume that the reader is familiar with the language. If you are new to Objective-C or need a refresher, please read <a href="https://developer.apple.com/library/mac/#documentation/Cocoa/Conceptual/ProgrammingWithObjectiveC/Introduction/Introduction.html" title="Programming with Objective-C" target="_blank" rel="external">Programming with Objective-C </a> .</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p>They say an example is worth a thousand words so let’s start off with an example that should give you a feel for the style, spacing, naming, etc.<br>An example header file, demonstrating the correct commenting and spacing for an <code>@interface</code> declaration</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#import <span class="meta-string">"Foo.h"</span></span></div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">Foo</span> </span>&#123;</div><div class="line">  <span class="built_in">NSString</span> *_bar;</div><div class="line">  <span class="built_in">NSString</span> *_foo;</div><div class="line">&#125;</div><div class="line"></div><div class="line">+ (<span class="keyword">instancetype</span>)fooWithBar:(<span class="built_in">NSString</span> *)bar &#123;</div><div class="line">  <span class="keyword">return</span> [[[<span class="keyword">self</span> alloc] initWithBar:bar] autorelease];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// Must always override super's designated initializer.</span></div><div class="line">- (<span class="keyword">instancetype</span>)init &#123;</div><div class="line">  <span class="keyword">return</span> [<span class="keyword">self</span> initWithBar:<span class="literal">nil</span>];</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">instancetype</span>)initWithBar:(<span class="built_in">NSString</span> *)bar &#123;</div><div class="line">  <span class="keyword">if</span> ((<span class="keyword">self</span> = [<span class="keyword">super</span> init])) &#123;</div><div class="line">    _bar = [bar <span class="keyword">copy</span>];</div><div class="line">    _bam = [[<span class="built_in">NSString</span> alloc] initWithFormat:<span class="string">@"hi %d"</span>, <span class="number">3</span>];</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">self</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)dealloc &#123;</div><div class="line">  [_bar release];</div><div class="line">  [_bam release];</div><div class="line">  [<span class="keyword">super</span> dealloc];</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="built_in">NSString</span> *)bar &#123;</div><div class="line">  <span class="keyword">return</span> _bar;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)setBar:(<span class="built_in">NSString</span> *)bar &#123;</div><div class="line">  [_bar autorelease];</div><div class="line">  _bar = [bar <span class="keyword">copy</span>];</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="built_in">BOOL</span>)doWorkWithBlah:(<span class="built_in">NSString</span> *)blah &#123;</div><div class="line">  <span class="comment">// ...</span></div><div class="line">  <span class="keyword">return</span> <span class="literal">NO</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<p>An example source file, demonstrating the correct commenting and spacing for the <code>@implementation</code> of an interface. It also includes the reference implementations for important methods like getters and setters,<code>init</code>, and <code>dealloc</code>.</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#import <span class="meta-string">"Foo.h"</span></span></div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">Foo</span> </span>&#123;</div><div class="line">  <span class="built_in">NSString</span> *_bar;</div><div class="line">  <span class="built_in">NSString</span> *_foo;</div><div class="line">&#125;</div><div class="line"></div><div class="line">+ (<span class="keyword">instancetype</span>)fooWithBar:(<span class="built_in">NSString</span> *)bar &#123;</div><div class="line">  <span class="keyword">return</span> [[[<span class="keyword">self</span> alloc] initWithBar:bar] autorelease];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// Must always override super's designated initializer.</span></div><div class="line">- (<span class="keyword">instancetype</span>)init &#123;</div><div class="line">  <span class="keyword">return</span> [<span class="keyword">self</span> initWithBar:<span class="literal">nil</span>];</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">instancetype</span>)initWithBar:(<span class="built_in">NSString</span> *)bar &#123;</div><div class="line">  <span class="keyword">if</span> ((<span class="keyword">self</span> = [<span class="keyword">super</span> init])) &#123;</div><div class="line">    _bar = [bar <span class="keyword">copy</span>];</div><div class="line">    _bam = [[<span class="built_in">NSString</span> alloc] initWithFormat:<span class="string">@"hi %d"</span>, <span class="number">3</span>];</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">self</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)dealloc &#123;</div><div class="line">  [_bar release];</div><div class="line">  [_bam release];</div><div class="line">  [<span class="keyword">super</span> dealloc];</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="built_in">NSString</span> *)bar &#123;</div><div class="line">  <span class="keyword">return</span> _bar;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)setBar:(<span class="built_in">NSString</span> *)bar &#123;</div><div class="line">  [_bar autorelease];</div><div class="line">  _bar = [bar <span class="keyword">copy</span>];</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="built_in">BOOL</span>)doWorkWithBlah:(<span class="built_in">NSString</span> *)blah &#123;</div><div class="line">  <span class="comment">// ...</span></div><div class="line">  <span class="keyword">return</span> <span class="literal">NO</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<p>Blank lines before and after <code>@interface</code>, <code>@implementation</code>, and <code>@end</code> are optional. If your <code>@interface</code> declares instance variables, a blank line should come after the closing brace (}).</p>
<p>Unless an interface or implementation is very short, such as when declaring a handful of private methods or a bridge class, adding blank lines usually helps readability.</p>
<h2 id="Spacing-And-Formatting"><a href="#Spacing-And-Formatting" class="headerlink" title="Spacing And Formatting"></a>Spacing And Formatting</h2><h3 id="Spaces-vs-Tabs"><a href="#Spaces-vs-Tabs" class="headerlink" title="Spaces vs. Tabs"></a>Spaces vs. Tabs</h3><p>Use only spaces, and indent 2 spaces at a time.<br>We use spaces for indentation. Do not use tabs in your code. You should set your editor to emit spaces when you hit the tab key.</p>
<h3 id="Line-Length"><a href="#Line-Length" class="headerlink" title="Line Length"></a>Line Length</h3><p>The maximum line length for Objective-C and Objective-C++ files is 100 columns. Projects may opt to use an 80 column limit for consistency with the C++ style guide.<br>You can make violations easier to spot by enabling Preferences > Text Editing > Page guide at column: 100 in Xcode.</p>
<h3 id="Method-Declarations-and-Definitions"><a href="#Method-Declarations-and-Definitions" class="headerlink" title="Method Declarations and Definitions"></a>Method Declarations and Definitions</h3><p>One space should be used between the - or + and the return type, and no spacing in the parameter list except between parameters.<br>Methods should look like this:<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)doSomethingWithString:(<span class="built_in">NSString</span> *)theString &#123;</div><div class="line">  ...</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>The spacing before the asterisk is optional. When adding new code, be consistent with the surrounding file’s style.<br>If you have too many parameters to fit on one line, giving each its own line is preferred. If multiple lines are used, align each using the colon before the parameter.<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)doSomethingWith:(GTMFoo *)theFoo</div><div class="line">                   rect:(<span class="built_in">NSRect</span>)theRect</div><div class="line">               interval:(<span class="keyword">float</span>)theInterval &#123;</div><div class="line">  ...</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>When the first keyword is shorter than the others, indent the later lines by at least four spaces, maintaining colon alignment:<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)<span class="keyword">short</span>:(GTMFoo *)theFoo</div><div class="line">          longKeyword:(<span class="built_in">NSRect</span>)theRect</div><div class="line">    evenLongerKeyword:(<span class="keyword">float</span>)theInterval</div><div class="line">                error:(<span class="built_in">NSError</span> **)theError &#123;</div><div class="line">  ...</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="Method-Invocations"><a href="#Method-Invocations" class="headerlink" title="Method Invocations"></a>Method Invocations</h3><p>Method invocations should be formatted much like method declarations. When there’s a choice of formatting styles, follow the convention already used in a given source file.<br>Invocations should have all arguments on one line:<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[myObject doFooWith:arg1 name:arg2 error:arg3];</div></pre></td></tr></table></figure></p>
<p>or have one argument per line, with colons aligned:<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[myObject doFooWith:arg1</div><div class="line">               name:arg2</div><div class="line">              error:arg3];</div></pre></td></tr></table></figure></p>
<p>Don’t use any of these styles:<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">[myObject doFooWith:arg1 name:arg2  <span class="comment">// some lines with &gt;1 arg</span></div><div class="line">              error:arg3];</div><div class="line"></div><div class="line">[myObject doFooWith:arg1</div><div class="line">               name:arg2 error:arg3];</div><div class="line"></div><div class="line">[myObject doFooWith:arg1</div><div class="line">          name:arg2  <span class="comment">// aligning keywords instead of colons</span></div><div class="line">          error:arg3];</div></pre></td></tr></table></figure></p>
<p>As with declarations and definitions, when the first keyword is shorter than the others, indent the later lines by at least four spaces, maintaining colon alignment:<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[myObj <span class="keyword">short</span>:arg1</div><div class="line">          longKeyword:arg2</div><div class="line">    evenLongerKeyword:arg3</div><div class="line">                error:arg4];</div></pre></td></tr></table></figure></p>
<p>Invocations containing inlined blocks may have their segments left-aligned at a four space indent.</p>
<h3 id="public-and-private"><a href="#public-and-private" class="headerlink" title="@public and @private"></a>@public and @private</h3><p>The <code>@public</code> and<code>@private</code> access modifiers should be indented by 1 space.<br>This is similar to <code>public</code>, <code>private</code>, and <code>protected</code> in C++.<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">MyClass</span> : <span class="title">NSObject</span> </span>&#123;</div><div class="line"> <span class="keyword">@public</span></div><div class="line">  ...</div><div class="line"> <span class="keyword">@private</span></div><div class="line">  ...</div><div class="line">&#125;</div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure></p>
<h3 id="Exceptions"><a href="#Exceptions" class="headerlink" title="Exceptions"></a>Exceptions</h3><p>Format exceptions with each @ label on its own line and a space between the @ label and the opening brace ({), as well as between the @catch and the caught object declaration.<br>If you must use Obj-C exceptions, format them as follows. However, see Avoid Throwing Exceptions for reasons why you should not be using exceptions.<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">@try</span> &#123;</div><div class="line">  foo();</div><div class="line">&#125;</div><div class="line"><span class="keyword">@catch</span> (<span class="built_in">NSException</span> *ex) &#123;</div><div class="line">  bar(ex);</div><div class="line">&#125;</div><div class="line"><span class="keyword">@finally</span> &#123;</div><div class="line">  baz();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="Protocols"><a href="#Protocols" class="headerlink" title="Protocols"></a>Protocols</h3><p>There should not be a space between the type identifier and the name of the protocol encased in angle brackets.<br>This applies to class declarations, instance variables, and method declarations. For example:<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">MyProtocoledClass</span> : <span class="title">NSObject</span>&lt;<span class="title">NSWindowDelegate</span>&gt; </span>&#123;</div><div class="line"> <span class="keyword">@private</span></div><div class="line">  <span class="keyword">id</span>&lt;MyFancyDelegate&gt; _delegate;</div><div class="line">&#125;</div><div class="line">- (<span class="keyword">void</span>)setDelegate:(<span class="keyword">id</span>&lt;MyFancyDelegate&gt;)aDelegate;</div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure></p>
<h3 id="Blocks"><a href="#Blocks" class="headerlink" title="Blocks"></a>Blocks</h3><p>Code inside blocks should be indented four spaces.<br>There are several appropriate style rules, depending on how long the block is:</p>
<ul>
<li>If the block can fit on one line, no wrapping is necessary.</li>
<li>If it has to wrap, the closing brace should line up with the first character of the line on which the block is declared.</li>
<li>Code within the block should be indented four spaces.</li>
<li>If the block is large, e.g. more than 20 lines, it is recommended to move it out-of-line into a local variable.</li>
<li>If the block takes no parameters, there are no spaces between the characters ^{. If the block takes parameters, there is no space between the ^( characters, but there is one space between the ) { characters.</li>
<li>Invocations containing inlined blocks may have their segments left-aligned at a four-space indent. This helps when invocations contain multiple inlined blocks.</li>
<li>Two space indents inside blocks are also allowed, but should only be used when it’s consistent with the rest of the project’s code.<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// The entire block fits on one line.</span></div><div class="line">[operation setCompletionBlock:^&#123; [<span class="keyword">self</span> onOperationDone]; &#125;];</div><div class="line"></div><div class="line"><span class="comment">// The block can be put on a new line, indented four spaces, with the</span></div><div class="line"><span class="comment">// closing brace aligned with the first character of the line on which</span></div><div class="line"><span class="comment">// block was declared.</span></div><div class="line">[operation setCompletionBlock:^&#123;</div><div class="line">    [<span class="keyword">self</span>.delegate newDataAvailable];</div><div class="line">&#125;];</div><div class="line"></div><div class="line"><span class="comment">// Using a block with a C API follows the same alignment and spacing</span></div><div class="line"><span class="comment">// rules as with Objective-C.</span></div><div class="line"><span class="built_in">dispatch_async</span>(_fileIOQueue, ^&#123;</div><div class="line">    <span class="built_in">NSString</span>* path = [<span class="keyword">self</span> sessionFilePath];</div><div class="line">    <span class="keyword">if</span> (path) &#123;</div><div class="line">      <span class="comment">// ...</span></div><div class="line">    &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// An example where the parameter wraps and the block declaration fits</span></div><div class="line"><span class="comment">// on the same line. Note the spacing of |^(SessionWindow *window) &#123;|</span></div><div class="line"><span class="comment">// compared to |^&#123;| above.</span></div><div class="line">[[SessionService sharedService]</div><div class="line">    loadWindowWithCompletionBlock:^(SessionWindow *window) &#123;</div><div class="line">        <span class="keyword">if</span> (window) &#123;</div><div class="line">          [<span class="keyword">self</span> windowDidLoad:window];</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">          [<span class="keyword">self</span> errorLoadingWindow];</div><div class="line">        &#125;</div><div class="line">    &#125;];</div><div class="line"></div><div class="line"><span class="comment">// An example where the parameter wraps and the block declaration does</span></div><div class="line"><span class="comment">// not fit on the same line as the name.</span></div><div class="line">[[SessionService sharedService]</div><div class="line">    loadWindowWithCompletionBlock:</div><div class="line">        ^(SessionWindow *window) &#123;</div><div class="line">            <span class="keyword">if</span> (window) &#123;</div><div class="line">              [<span class="keyword">self</span> windowDidLoad:window];</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">              [<span class="keyword">self</span> errorLoadingWindow];</div><div class="line">            &#125;</div><div class="line">        &#125;];</div><div class="line"></div><div class="line"><span class="comment">// Large blocks can be declared out-of-line.</span></div><div class="line"><span class="keyword">void</span> (^largeBlock)(<span class="keyword">void</span>) = ^&#123;</div><div class="line">    <span class="comment">// ...</span></div><div class="line">&#125;;</div><div class="line">[_operationQueue addOperationWithBlock:largeBlock];</div><div class="line"></div><div class="line"><span class="comment">// An example with multiple inlined blocks in one invocation.</span></div><div class="line">[myObject doSomethingWith:arg1</div><div class="line">    firstBlock:^(Foo *a) &#123;</div><div class="line">        <span class="comment">// ...</span></div><div class="line">    &#125;</div><div class="line">    secondBlock:^(Bar *b) &#123;</div><div class="line">        <span class="comment">// ...</span></div><div class="line">    &#125;];</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="Container-Literals"><a href="#Container-Literals" class="headerlink" title="Container Literals"></a>Container Literals</h3><p>For projects using Xcode 4.4 or later and clang, the use of container (array and dictionary) literals is encouraged. If split across multiple lines, the contents should be indented two spaces.<br>If the collection fits on one line, put a single space after the opening and before the closing brackets.<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">NSArray</span>* array = @[ [foo description], <span class="string">@"Another String"</span>, [bar description] ];</div><div class="line"></div><div class="line"><span class="built_in">NSDictionary</span>* dict = @&#123; <span class="built_in">NSForegroundColorAttributeName</span> : [<span class="built_in">NSColor</span> redColor] &#125;;</div></pre></td></tr></table></figure></p>
<p>Not:<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">NSArray</span>* array = @[[foo description], [bar description]];</div><div class="line"></div><div class="line"><span class="built_in">NSDictionary</span>* dict = @&#123;<span class="built_in">NSForegroundColorAttributeName</span>: [<span class="built_in">NSColor</span> redColor]&#125;;</div></pre></td></tr></table></figure></p>
<p>If the collection spans more than a single line, place the opening bracket on the same line as the declaration, indent the body by two spaces, and place the closing bracket on a new line that is indented to the same level as the opening bracket.<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">NSArray</span>* array = @[</div><div class="line">  <span class="string">@"This"</span>,</div><div class="line">  <span class="string">@"is"</span>,</div><div class="line">  <span class="string">@"an"</span>,</div><div class="line">  <span class="string">@"array"</span></div><div class="line">];</div><div class="line"></div><div class="line"><span class="built_in">NSDictionary</span>* dictionary = @&#123;</div><div class="line">  <span class="built_in">NSFontAttributeName</span> : [<span class="built_in">NSFont</span> fontWithName:<span class="string">@"Helvetica-Bold"</span> size:<span class="number">12</span>],</div><div class="line">  <span class="built_in">NSForegroundColorAttributeName</span> : fontColor</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>For dictionary literals, there should be one space before the colon and at least one space after it (to optionally align the values).<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">NSDictionary</span>* option1 = @&#123;</div><div class="line">  <span class="built_in">NSFontAttributeName</span> : [<span class="built_in">NSFont</span> fontWithName:<span class="string">@"Helvetica-Bold"</span> size:<span class="number">12</span>],</div><div class="line">  <span class="built_in">NSForegroundColorAttributeName</span> : fontColor</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="built_in">NSDictionary</span>* option2 = @&#123;</div><div class="line">  <span class="built_in">NSFontAttributeName</span> :            [<span class="built_in">NSFont</span> fontWithName:<span class="string">@"Arial"</span> size:<span class="number">12</span>],</div><div class="line">  <span class="built_in">NSForegroundColorAttributeName</span> : fontColor</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>The following are all incorrect:<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// There should be a space before the colon.</span></div><div class="line"><span class="built_in">NSDictionary</span>* wrong = @&#123;</div><div class="line">  AKey:       <span class="string">@"b"</span>,</div><div class="line">  BLongerKey: <span class="string">@"c"</span>,</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">// The items should each be on a new line, or the entire expression</span></div><div class="line"><span class="comment">// should fit on one line.</span></div><div class="line"><span class="built_in">NSDictionary</span>* alsoWrong= @&#123; AKey : <span class="string">@"a"</span>,</div><div class="line">                            BLongerKey : <span class="string">@"b"</span> &#125;;</div><div class="line"></div><div class="line"><span class="comment">// There should be no variable space before the colon, only after.</span></div><div class="line"><span class="built_in">NSDictionary</span>* stillWrong = @&#123;</div><div class="line">  AKey       : <span class="string">@"b"</span>,</div><div class="line">  BLongerKey : <span class="string">@"c"</span>,</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h2 id="Naming"><a href="#Naming" class="headerlink" title="Naming"></a>Naming</h2><p>Naming rules are very important in maintainable code. Objective-C method names tend to be very long, but this has the benefit that a block of code can almost read like prose, thus rendering many comments unnecessary.<br>When writing pure Objective-C code, we mostly follow standard Objective-C naming rules. These naming guidelines may differ significantly from those outlined in the C++ style guide. For example, Google’s C++ style guide recommends the use of underscores between words in variable names, whereas this guide recommends the use of intercaps, which is standard in the Objective-C community.<br>Any class, category, method, or variable name may use all capitals for initialisms within the name. This follows Apple’s standard of using all capitals within a name for initialisms such as URL, TIFF, and EXIF.<br>When writing Objective-C++, however, things are not so cut and dry. Many projects need to implement cross-platform C++ APIs with some Objective-C or Cocoa, or bridge between a C++ back-end and a native Cocoa front-end. This leads to situations where the two guides are directly at odds.<br>Our solution is that the style follows that of the method/function being implemented. If you’re in an @implementation block, use the Objective-C naming rules. If you’re implementing a method for a C++ class, use the C++ naming rules. This avoids the situation where instance variable and local variable naming rules are mixed within a single function, which would be a serious detriment to readability.</p>
<h3 id="File-Names"><a href="#File-Names" class="headerlink" title="File Names"></a>File Names</h3><p>File names should reflect the name of the class implementation that they contain—including case. Follow the convention that your project uses.<br>File extensions should be as follows:</p>
<p>| .h | C/C++/Objective-C header file |<br>| .m | Objective-C implementation file |<br>| .mm | Objective-C++ implementation file |<br>| .cc | Pure C++ implementation file |<br>| .c | C implementation file |</p>
<p>File names for categories should include the name of the class being extended, e.g. <code>GTMNSString+Utils.h</code> or <code>GTMNSTextView+Autocomplete.h</code></p>
<h3 id="Objective-C"><a href="#Objective-C" class="headerlink" title="Objective-C++"></a>Objective-C++</h3><p>Within a source file, Objective-C++ follows the style of the function/method you’re implementing.<br>In order to minimize clashes between the differing naming styles when mixing Cocoa/Objective-C and C++, follow the style of the method being implemented. If you’re in an @implementation block, use the Objective-C naming rules. If you’re implementing a method for a C++ class, use the C++ naming rules.<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// file: cross_platform_header.h</span></div><div class="line"></div><div class="line"><span class="keyword">class</span> CrossPlatformAPI &#123;</div><div class="line"> public:</div><div class="line">  ...</div><div class="line">  <span class="keyword">int</span> DoSomethingPlatformSpecific();  <span class="comment">// impl on each platform</span></div><div class="line"> private:</div><div class="line">  <span class="keyword">int</span> an_instance_var_;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">// file: mac_implementation.mm</span></div><div class="line"><span class="meta">#include <span class="meta-string">"cross_platform_header.h"</span></span></div><div class="line"></div><div class="line"><span class="comment">// A typical Objective-C class, using Objective-C naming.</span></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">MyDelegate</span> : <span class="title">NSObject</span> </span>&#123;</div><div class="line"> <span class="keyword">@private</span></div><div class="line">  <span class="keyword">int</span> _instanceVar;</div><div class="line">  CrossPlatformAPI* _backEndObject;</div><div class="line">&#125;</div><div class="line">- (<span class="keyword">void</span>)respondToSomething:(<span class="keyword">id</span>)something;</div><div class="line"><span class="keyword">@end</span></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">MyDelegate</span></span></div><div class="line">- (<span class="keyword">void</span>)respondToSomething:(<span class="keyword">id</span>)something &#123;</div><div class="line">  <span class="comment">// bridge from Cocoa through our C++ backend</span></div><div class="line">  _instanceVar = _backEndObject-&gt;DoSomethingPlatformSpecific();</div><div class="line">  <span class="built_in">NSString</span>* tempString = [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"%d"</span>, _instanceVar];</div><div class="line">  <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>, tempString);</div><div class="line">&#125;</div><div class="line"><span class="keyword">@end</span></div><div class="line"></div><div class="line"><span class="comment">// The platform-specific implementation of the C++ class, using</span></div><div class="line"><span class="comment">// C++ naming.</span></div><div class="line"><span class="keyword">int</span> CrossPlatformAPI::DoSomethingPlatformSpecific() &#123;</div><div class="line">  <span class="built_in">NSString</span>* temp_string = [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"%d"</span>, an_instance_var_];</div><div class="line">  <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>, temp_string);</div><div class="line">  <span class="keyword">return</span> [temp_string intValue];</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="Class-Names"><a href="#Class-Names" class="headerlink" title="Class Names"></a>Class Names</h3><p>Class names (along with category and protocol names) should start as uppercase and use mixed case to delimit words.<br>When designing code to be shared across multiple applications, prefixes are acceptable and recommended (e.g. <code>GTMSendMessage</code>). Prefixes are also recommended for classes of large applications that depend on external libraries.</p>
<h3 id="Category-Names"><a href="#Category-Names" class="headerlink" title="Category Names"></a>Category Names</h3><p>Category names should start with a 2 or 3 character prefix identifying the category as part of a project or open for general use. The category name should incorporate the name of the class it’s extending.<br>For example, if we want to create a category on NSString for parsing, we would put the category in a file named <code>GTMNSString+Parsing.h</code>, and the category itself would be named <code>GTMStringParsingAdditions</code> (yes, we know the file name and the category name do not match, but this file could have many separate categories related to parsing). Methods in that category should share the prefix (<code>gtm_myCategoryMethodOnAString:</code>) in order to prevent collisions in Objective-C which only has a single namespace. If the code isn’t meant to be shared and/or doesn’t run in a different address-space, the method naming isn’t quite as important.<br>There should be a single space between the class name and the opening parenthesis of the category.<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Extending a framework class:</span></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">NSString</span> (<span class="title">GTMStringParsingAdditions</span>)</span></div><div class="line">- (<span class="built_in">NSString</span> *)gtm_foobarString;</div><div class="line"><span class="keyword">@end</span></div><div class="line"></div><div class="line"><span class="comment">// Making your methods and properties private:</span></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">FoobarViewController</span> ()</span></div><div class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>, <span class="keyword">retain</span>) <span class="built_in">NSView</span> *dongleView;</div><div class="line">- (<span class="keyword">void</span>)performLayout;</div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure></p>
<h3 id="Objective-C-Method-Names"><a href="#Objective-C-Method-Names" class="headerlink" title="Objective-C Method Names"></a>Objective-C Method Names</h3><p>Method names should start as lowercase and then use mixed case. Each named parameter should also start as lowercase.<br>The method name should read like a sentence if possible, meaning you should choose parameter names that flow with the method name. (e.g. <code>convertPoint:fromRect:</code>or <code>replaceCharactersInRange:withString:</code>). See <a href="https://developer.apple.com/documentation/Cocoa/Conceptual/CodingGuidelines/Articles/NamingMethods.html#//apple_ref/doc/uid/20001282-BCIGIJJF" target="_blank" rel="external">Apple’s Guide to Naming Methods</a> for more details.<br>Accessor methods should be named the same as the variable they’re “getting”, but they should not be prefixed with the word “get”. For example:<br><code>- (id)getDelegate;  // AVOID</code><br><code>- (id)delegate;    // GOOD</code><br>This is for Objective-C methods only. C++ method names and functions continue to follow the rules set in the C++ style guide.</p>
<h3 id="Variable-Names"><a href="#Variable-Names" class="headerlink" title="Variable Names"></a>Variable Names</h3><p>Variables names start with a lowercase and use mixed case to delimit words. Instance variables have leading underscores. For example: <code>myLocalVariable</code>, <code>_myInstanceVariable</code>.</p>
<h4 id="Common-Variable-Names"><a href="#Common-Variable-Names" class="headerlink" title="Common Variable Names"></a>Common Variable Names</h4><p>Do not use Hungarian notation for syntactic attributes, such as the static type of a variable (int or pointer). Give as descriptive a name as possible, within reason. Don’t worry about saving horizontal space as it is far more important to make your code immediately understandable by a new reader. For example:<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> w;</div><div class="line"><span class="keyword">int</span> nerr;</div><div class="line"><span class="keyword">int</span> nCompConns;</div><div class="line">tix = [[<span class="built_in">NSMutableArray</span> alloc] init];</div><div class="line">obj = [someObject object];</div><div class="line">p = [network port];</div></pre></td></tr></table></figure></p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> numErrors;</div><div class="line"><span class="keyword">int</span> numCompletedConnections;</div><div class="line">tickets = [[<span class="built_in">NSMutableArray</span> alloc] init];</div><div class="line">userInfo = [someObject object];</div><div class="line">port = [network port];</div></pre></td></tr></table></figure>
<h4 id="Instance-Variables"><a href="#Instance-Variables" class="headerlink" title="Instance Variables"></a>Instance Variables</h4><p>Instance variables are mixed case and should be prefixed with an underscore e.g. <code>_usernameTextField</code>. Note that historically the convention was to put the underscore at the end of the name, and projects may opt to continue using trailing underscores in new code in order to maintain consistency within their codebase (see the Historical Notes section). It is recommended you leave old code as-is, unless doing so would create inconsistency within a class.</p>
<h4 id="Constants"><a href="#Constants" class="headerlink" title="Constants"></a>Constants</h4><p>Constant names (#defines, enums, const local variables, etc.) should start with a lowercase k and then use mixed case to delimit words. For example:<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> kNumberOfFiles = <span class="number">12</span>;</div><div class="line"><span class="built_in">NSString</span> *<span class="keyword">const</span> kUserKey = <span class="string">@"kUserKey"</span>;</div><div class="line"><span class="keyword">enum</span> DisplayTinge &#123;</div><div class="line">  kDisplayTingeGreen = <span class="number">1</span>,</div><div class="line">  kDisplayTingeBlue = <span class="number">2</span></div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>Because Objective-C does not provide namespacing, constants with global scope should have an appropriate prefix to minimize the chance of name collision, typically like <code>kClassNameFoo</code>.</p>
<h2 id="Comments"><a href="#Comments" class="headerlink" title="Comments"></a>Comments</h2><p>Though a pain to write, they are absolutely vital to keeping our code readable. The following rules describe what you should comment and where. But remember: while comments are very important, the best code is self-documenting. Giving sensible names to types and variables is much better than using obscure names and then trying to explain them through comments.<br>When writing your comments, write for your audience: the next contributor who will need to understand your code. Be generous—the next one may be you!<br>Remember that all of the rules and conventions listed in the C++ Style Guide are in effect here, with a few additional points, below.</p>
<h3 id="File-Comments"><a href="#File-Comments" class="headerlink" title="File Comments"></a>File Comments</h3><p>A file may optionally start with a description of its contents.<br>Every file should contain the following items, in order:</p>
<ul>
<li>license boilerplate if neccessary. Choose the appropriate boilerplate for the license used by the project (e.g. Apache 2.0, BSD, LGPL, GPL).</li>
<li>a basic description of the contents of the file if necessary.</li>
</ul>
<p>If you make significant changes to a file with an author line, consider deleting the author line since revision history already provides a more detailed and accurate record of authorship.</p>
<h3 id="Declaration-Comments"><a href="#Declaration-Comments" class="headerlink" title="Declaration Comments"></a>Declaration Comments</h3><p>Every interface, category, and protocol declaration should have an accompanying comment describing its purpose and how it fits into the larger picture.<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// A delegate for NSApplication to handle notifications about app</span></div><div class="line"><span class="comment">// launch and shutdown. Owned by the main app controller.</span></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">MyAppDelegate</span> : <span class="title">NSObject</span> </span>&#123;</div><div class="line">  ...</div><div class="line">&#125;</div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure></p>
<p>If you have already described an interface in detail in the comments at the top of your file feel free to simply state “See comment at top of file for a complete description”, but be sure to have some sort of comment.<br>Additionally, each method in the public interface should have a comment explaining its function, arguments, return value, and any side effects.<br>Document the synchronization assumptions the class makes, if any. If an instance of the class can be accessed by multiple threads, take extra care to document the rules and invariants surrounding multithreaded use.</p>
<h3 id="Implementation-Comments"><a href="#Implementation-Comments" class="headerlink" title="Implementation Comments"></a>Implementation Comments</h3><p>Use vertical bars to quote variable names and symbols in comments rather than quotes or naming the symbol inline.<br>This helps eliminate ambiguity, especially when the symbol is a common word that might make the sentence read like it was poorly constructed. E.g. for a symbol “count”:<br><code>// Sometimes we need |count| to be less than zero.</code><br>or when quoting something which already contains quotes<br><code>// Remember to call |StringWithoutSpaces(&quot;foo bar baz&quot;)|</code></p>
<h3 id="Object-Ownership"><a href="#Object-Ownership" class="headerlink" title="Object Ownership"></a>Object Ownership</h3><p>Make the pointer ownership model as explicit as possible when it falls outside the most common Objective-C usage idioms.</p>
<h4 id="Manual-Reference-Counting"><a href="#Manual-Reference-Counting" class="headerlink" title="Manual Reference Counting"></a>Manual Reference Counting</h4><p>Instance variables which are pointers to objects derived from NSObject are presumed to be retained, and should be either commented as weak or declared with the __weak lifetime qualifier when applicable. Similarly, declared properties must specify an assign property attribute if they are not retained by the class. An exception is instance variables labeled as IBOutlets in desktop Mac software, which are presumed to not be retained.<br>Where instance variables are pointers to Core Foundation, C++, and other non-Objective-C objects, they should always be declared with strong and weak comments to indicate which pointers are and are not retained. Core Foundation and other non-Objective-C object pointers require explicit memory management, even when building for automatic reference counting or garbage collection.<br>Examples of strong and weak declarations:<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">MyDelegate</span> : <span class="title">NSObject</span> </span>&#123;</div><div class="line"> <span class="keyword">@private</span></div><div class="line">  <span class="keyword">IBOutlet</span> <span class="built_in">NSButton</span> *_okButton;  <span class="comment">// Normal NSControl; implicitly weak on Mac only</span></div><div class="line"></div><div class="line">  AnObjcObject* _doohickey;  <span class="comment">// My doohickey</span></div><div class="line">  __<span class="keyword">weak</span> MyObjcParent *_parent;  <span class="comment">// So we can send msgs back (owns me)</span></div><div class="line"></div><div class="line">  <span class="comment">// non-NSObject pointers...</span></div><div class="line">  CWackyCPPClass *_wacky;  <span class="comment">// Strong, some cross-platform object</span></div><div class="line">  <span class="built_in">CFDictionaryRef</span> *_dict;  <span class="comment">// Strong</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">@property</span>(<span class="keyword">strong</span>, <span class="keyword">nonatomic</span>) <span class="built_in">NSString</span> *doohickey;</div><div class="line"><span class="keyword">@property</span>(<span class="keyword">weak</span>, <span class="keyword">nonatomic</span>) <span class="built_in">NSString</span> *parent;</div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure></p>
<h4 id="Automatic-Reference-Counting"><a href="#Automatic-Reference-Counting" class="headerlink" title="Automatic Reference Counting"></a>Automatic Reference Counting</h4><p>Object ownership and lifetime are explicit when using ARC, so no additional comments are required.</p>
<h2 id="Cocoa-and-Objective-C-Features"><a href="#Cocoa-and-Objective-C-Features" class="headerlink" title="Cocoa and Objective-C Features"></a>Cocoa and Objective-C Features</h2><h3 id="Instance-Variables-In-Headers-Should-Be-private"><a href="#Instance-Variables-In-Headers-Should-Be-private" class="headerlink" title="Instance Variables In Headers Should Be @private"></a>Instance Variables In Headers Should Be @private</h3><p>Instance variables should typically be declared in implementation files or auto-synthesized by properties. When ivars are declared in a header file, they should be marked <code>@private</code>.<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">MyClass</span> : <span class="title">NSObject</span> </span>&#123;</div><div class="line"> <span class="keyword">@private</span></div><div class="line">  <span class="keyword">id</span> _myInstanceVariable;</div><div class="line">&#125;</div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure></p>
<h3 id="Identify-Designated-Initializer"><a href="#Identify-Designated-Initializer" class="headerlink" title="Identify Designated Initializer"></a>Identify Designated Initializer</h3><p>Comment and clearly identify your designated initializer.<br>It is important for those who might be subclassing your class that the designated initializer be clearly identified. That way, they only need to subclass a single initializer (of potentially several) to guarantee their subclass’ initializer is called. It also helps those debugging your class in the future understand the flow of initialization code if they need to step through it.</p>
<h3 id="Override-Designated-Initializer"><a href="#Override-Designated-Initializer" class="headerlink" title="Override Designated Initializer"></a>Override Designated Initializer</h3><p>When writing a subclass that requires an <code>init...</code> method, make sure you override the superclass’ designated initializer.<br>If you fail to override the superclass’ designated initializer, your initializer may not be called in all cases, leading to subtle and very difficult to find bugs.</p>
<h3 id="Overridden-NSObject-Method-Placement"><a href="#Overridden-NSObject-Method-Placement" class="headerlink" title="Overridden NSObject Method Placement"></a>Overridden NSObject Method Placement</h3><p>It is strongly recommended and typical practice to place overridden methods of <code>NSObject</code> at the top of an <code>@implementation</code>.<br>This commonly applies (but is not limited) to the <code>init...</code>, <code>copyWithZone:</code>, and <code>dealloc</code>methods. <code>init...</code> methods should be grouped together, followed by other <code>NSObject</code> methods.<br>Convenience class methods for creating instances may precede the NSObject methods.</p>
<h3 id="Initialization"><a href="#Initialization" class="headerlink" title="Initialization"></a>Initialization</h3><p>Don’t initialize variables to <code>0</code> or <code>nil</code> in the init method; it’s redundant.<br>All memory for a newly allocated object is initialized to 0 (except for <code>isa</code>), so don’t clutter up the <code>init</code> method by re-initializing variables to <code>0</code> or <code>nil</code>.</p>
<h3 id="Avoid-new"><a href="#Avoid-new" class="headerlink" title="Avoid +new"></a>Avoid +new</h3><p>Do not invoke the <code>NSObject</code> class method <code>new</code>, nor override it in a subclass. Instead, use <code>alloc</code> and <code>init</code> methods to instantiate retained objects.<br>Modern Objective-C code explicitly calls <code>alloc</code> and an <code>init</code> method to create and retain an object. As the <code>new</code>class method is rarely used, it makes reviewing code for correct memory management more difficult.</p>
<h3 id="Keep-the-Public-API-Simple"><a href="#Keep-the-Public-API-Simple" class="headerlink" title="Keep the Public API Simple"></a>Keep the Public API Simple</h3><p>Keep your class simple; avoid “kitchen-sink” APIs. If a method doesn’t need to be public, don’t make it so. Use a private category to prevent cluttering the public header.<br>Unlike C++, Objective-C doesn’t have a way to differentiate between public and private methods—everything is public. As a result, avoid placing methods in the public API unless they are actually expected to be used by a consumer of the class. This helps reduce the likelihood they’ll be called when you’re not expecting it. This includes methods that are being overridden from the parent class. For internal implementation methods, use a category defined in the implementation file as opposed to adding them to the public header.<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#import <span class="meta-string">"GTMFoo.h"</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">GTMFoo</span> (<span class="title">PrivateDelegateHandling</span>)</span></div><div class="line">- (<span class="built_in">NSString</span> *)doSomethingWithDelegate;  <span class="comment">// Declare private method</span></div><div class="line"><span class="keyword">@end</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">GTMFoo</span> (<span class="title">PrivateDelegateHandling</span>)</span></div><div class="line">...</div><div class="line">- (<span class="built_in">NSString</span> *)doSomethingWithDelegate &#123;</div><div class="line">  <span class="comment">// Implement this method</span></div><div class="line">&#125;</div><div class="line">...</div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure></p>
<p>If you are using Objective-C 2.0, you should instead declare your private category using a <a href="https://developer.apple.com/documentation/Cocoa/Conceptual/ObjectiveC/Articles/chapter_4_section_5.html#" target="_blank" rel="external">class extension</a>, for example:<br>    <code>@interface GMFoo () { ... }</code><br>which will guarantee that the declared methods are implemented in the <code>@implementation</code> section by issuing a compiler warning if they are not.<br>Again, “private” methods are not really private. You could accidentally override a superclass’s “private” method, thus making a very difficult bug to squash. In general, private methods should have a fairly unique name that will prevent subclasses from unintentionally overriding them.<br>Finally, Objective-C categories are a great way to segment a large <code>@implementation</code> section into more understandable chunks and to add new, application-specific functionality to the most appropriate class. For example, instead of adding “middle truncation” code to a random object in your app, make a new category on <code>NSString</code>).</p>
<h3 id="import-and-include"><a href="#import-and-include" class="headerlink" title="#import and #include"></a>#import and #include</h3><p>\#import Objective-C/Objective-C++ headers, and #include C/C++ headers.<br>Choose between #import and #include based on the language of the header that you are including.<br>• When including a header that uses Objective-C or Objective-C++, use #import.<br>• When including a standard C or C++ header, use #include. The header should provide its own #define guard.<br>Some Objective-C headers lack #define guards, and expect to be included only by #import. As Objective-C headers may only be included in Objective-C source files and other Objective-C headers, using #import across the board is appropriate.<br>Standard C and C++ headers without any Objective-C in them can expect to be included by ordinary C and C++ files. Since there is no #import in standard C or C++, such files will be included by #include in those cases. Using #include for them in Objective-C source files as well means that these headers will always be included with the same semantics.<br>This rule helps avoid inadvertent errors in cross-platform projects. A Mac developer introducing a new C or C++ header might forget to add #define guards, which would not cause problems on the Mac if the new header were included with #import, but would break builds on other platforms where #include is used. Being consistent by using #include on all platforms means that compilation is more likely to succeed everywhere or fail everywhere, and avoids the frustration of files working only on some platforms.<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#import <span class="meta-string">&lt;Cocoa/Cocoa.h&gt;</span></span></div><div class="line"><span class="meta">#include <span class="meta-string">&lt;CoreFoundation/CoreFoundation.h&gt;</span></span></div><div class="line"><span class="meta">#import <span class="meta-string">"GTMFoo.h"</span></span></div><div class="line"><span class="meta">#include <span class="meta-string">"base/basictypes.h"</span></span></div></pre></td></tr></table></figure></p>
<h3 id="Use-Root-Frameworks"><a href="#Use-Root-Frameworks" class="headerlink" title="Use Root Frameworks"></a>Use Root Frameworks</h3><p>Include root frameworks over individual files.<br>While it may seem tempting to include individual system headers from a framework such as Cocoa or Foundation, in fact it’s less work on the compiler if you include the top-level root framework. The root framework is generally pre-compiled and can be loaded much more quickly. In addition, remember to use <code>#import</code> rather than <code>#include</code> for Objective-C frameworks.<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#import <span class="meta-string">&lt;Foundation/Foundation.h&gt;</span>     // good</span></div><div class="line"><span class="meta">#import <span class="meta-string">&lt;Foundation/NSArray.h&gt;</span>        // avoid</span></div><div class="line"><span class="meta">#import <span class="meta-string">&lt;Foundation/NSString.h&gt;</span></span></div><div class="line">...</div></pre></td></tr></table></figure></p>
<h3 id="Prefer-To-autorelease-At-Time-of-Creation"><a href="#Prefer-To-autorelease-At-Time-of-Creation" class="headerlink" title="Prefer To autorelease At Time of Creation"></a>Prefer To autorelease At Time of Creation</h3><p>When creating new temporary objects, <code>autorelease</code> them on the same line as you create them rather than a separate release later in the same method.<br>While ever so slightly slower, this prevents someone from accidentally removing the <code>release</code> or inserting a <code>return</code> before it and introducing a memory leak. E.g.:<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// AVOID (unless you have a compelling performance reason)</span></div><div class="line">MyController* controller = [[MyController alloc] init];</div><div class="line"><span class="comment">// ... code here that might return ...</span></div><div class="line">[controller release];</div><div class="line"></div><div class="line"><span class="comment">// BETTER</span></div><div class="line">MyController* controller = [[[MyController alloc] init] autorelease];</div></pre></td></tr></table></figure></p>
<h3 id="Autorelease-Then-Retain"><a href="#Autorelease-Then-Retain" class="headerlink" title="Autorelease Then Retain"></a>Autorelease Then Retain</h3><p>Assignment of objects follows the <code>autorelease</code> then <code>retain</code> pattern.<br>When assigning a new object to a variable, one must first release the old object to avoid a memory leak. There are several “correct” ways to handle this. We’ve chosen the “autorelease then retain” approach because it’s less prone to error. Be aware in tight loops it can fill up the autorelease pool, and may be slightly less efficient, but we feel the tradeoffs are acceptable.<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)setFoo:(GMFoo *)aFoo &#123;</div><div class="line">  [_foo autorelease];  <span class="comment">// Won't dealloc if |_foo| == |aFoo|</span></div><div class="line">  _foo = [aFoo <span class="keyword">retain</span>];</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="Avoid-Accessors-During-init-and-dealloc"><a href="#Avoid-Accessors-During-init-and-dealloc" class="headerlink" title="Avoid Accessors During init and dealloc"></a>Avoid Accessors During init and dealloc</h3><p>Instance subclasses may be in an inconsistent state during <code>init</code> and <code>dealloc</code> method execution, so code in those methods should avoid invoking accessors.<br>Subclasses have not yet been initialized or have already deallocated when <code>init</code> and <code>dealloc</code> methods execute, making accessor methods potentially unreliable. Whenever practical, directly assign to and release ivars in those methods rather than rely on accessors.<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">instancetype</span>)init &#123;</div><div class="line">  <span class="keyword">self</span> = [<span class="keyword">super</span> init];</div><div class="line">  <span class="keyword">if</span> (<span class="keyword">self</span>) &#123;</div><div class="line">    _bar = [[<span class="built_in">NSMutableString</span> alloc] init];  <span class="comment">// good</span></div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">self</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)dealloc &#123;</div><div class="line">  [_bar release];                           <span class="comment">// good</span></div><div class="line">  [<span class="keyword">super</span> dealloc];</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">instancetype</span>)init &#123;</div><div class="line">  <span class="keyword">self</span> = [<span class="keyword">super</span> init];</div><div class="line">  <span class="keyword">if</span> (<span class="keyword">self</span>) &#123;</div><div class="line">    <span class="keyword">self</span>.bar = [<span class="built_in">NSMutableString</span> string];  <span class="comment">// avoid</span></div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">self</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)dealloc &#123;</div><div class="line">  <span class="keyword">self</span>.bar = <span class="literal">nil</span>;                         <span class="comment">// avoid</span></div><div class="line">  [<span class="keyword">super</span> dealloc];</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="Dealloc-Instance-Variables-in-Declaration-Order"><a href="#Dealloc-Instance-Variables-in-Declaration-Order" class="headerlink" title="Dealloc Instance Variables in Declaration Order"></a>Dealloc Instance Variables in Declaration Order</h3><p><code>dealloc</code> should process instance variables in the same order the <code>@interface</code> declares them, so it is easier for a reviewer to verify.<br>A code reviewer checking a new or revised <code>dealloc</code> implementation needs to make sure that every retained instance variable gets released.<br>To simplify reviewing <code>dealloc</code>, order the code so that the retained instance variables get released in the same order that they are declared in the <code>@interface</code>. If <code>dealloc</code> invokes other methods that release instance variables, add comments describing what instance variables those methods handle.</p>
<h3 id="Setters-copy-NSStrings"><a href="#Setters-copy-NSStrings" class="headerlink" title="Setters copy NSStrings"></a>Setters copy NSStrings</h3><p>Setters taking an <code>NSString</code>, should always copy the string it accepts.<br>Never just <code>retain</code> the string. This avoids the caller changing it under you without your knowledge. Don’t assume that because you’re accepting an <code>NSString</code> that it’s not actually an<code>NSMutableString</code>.<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)setFoo:(<span class="built_in">NSString</span> *)aFoo &#123;</div><div class="line">  [_foo autorelease];</div><div class="line">  _foo = [aFoo <span class="keyword">copy</span>];</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="Avoid-Throwing-Exceptions"><a href="#Avoid-Throwing-Exceptions" class="headerlink" title="Avoid Throwing Exceptions"></a>Avoid Throwing Exceptions</h3><p>Don’t <code>@throw</code> Objective-C exceptions, but you should be prepared to catch them from third-party or OS calls.<br>We do compile with <code>-fobjc-exceptions</code> (mainly so we get <code>@synchronized</code>), but we don’t <code>@throw</code>. Use of <code>@try</code>, <code>@catch</code>, and <code>@finally</code> are allowed when required to properly use 3rd party code or libraries. If you do use them please document exactly which methods you expect to throw.</p>
<h3 id="nil-Checks"><a href="#nil-Checks" class="headerlink" title="nil Checks"></a>nil Checks</h3><p>Use <code>nil</code> checks for logic flow only.<br>Use nil pointer checks for logic flow of the application, not for preventing crashes when sending messages. With current compilers ( <a href="http://www.sealiesoftware.com/blog/archive/2012/2/29/objc_explain_return_value_of_message_to_nil.html" target="_blank" rel="external">as of LLVM 3.0/Xcode 4.2</a>), sending a message to nil reliably returns nil as a pointer, zero as an integer or floating-point value, structs initialized to 0, and <code>_Complex</code> values equal to 0, 0.<br>Note that this applies to <code>nil</code> as a message target, not as a parameter value. Individual methods may or may not safely handle nil parameter values.<br>Note too that this is distinct from checking C/C++ pointers and block pointers against <code>NULL</code>, which the runtime does not handle and will cause your application to crash. You still need to make sure you do not dereference a <code>NULL</code> pointer.</p>
<h3 id="BOOL-Pitfalls"><a href="#BOOL-Pitfalls" class="headerlink" title="BOOL Pitfalls"></a>BOOL Pitfalls</h3><p>Be careful when converting general integral values to <code>BOOL</code>. Avoid comparing directly with YES.<br><code>BOOL</code> is defined as a signed char in Objective-C which means that it can have values other than <code>YES</code> (1) and <code>NO</code> (0). Do not cast or convert general integral values directly to <code>BOOL</code>. Common mistakes include casting or converting an array’s size, a pointer value, or the result of a bitwise logic operation to a <code>BOOL</code> which, depending on the value of the last byte of the integral result, could still result in a <code>NO</code> value. When converting a general integral value to a <code>BOOL</code> use ternary operators to return a <code>YES</code> or <code>NO</code> value.<br>You can safely interchange and convert <code>BOOL</code>, <code>_Bool</code> and <code>bool</code> (see C++ Std 4.7.4, 4.12 and C99 Std 6.3.1.2). You cannot safely interchange <code>BOOL</code> and <code>Boolean</code> so treat <code>Booleans</code> as a general integral value as discussed above. Only use <code>BOOL</code> in <code>Objective C</code> method signatures.<br>Using logical operators (&amp;&amp;, || and !) with <code>BOOL</code> is also valid and will return values that can be safely converted to <code>BOOL</code> without the need for a ternary operator.<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//avoid</span></div><div class="line">- (<span class="built_in">BOOL</span>)isBold &#123;</div><div class="line">  <span class="keyword">return</span> [<span class="keyword">self</span> fontTraits] &amp; <span class="built_in">NSFontBoldTrait</span>;</div><div class="line">&#125;</div><div class="line">- (<span class="built_in">BOOL</span>)isValid &#123;</div><div class="line">  <span class="keyword">return</span> [<span class="keyword">self</span> stringValue];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//good</span></div><div class="line">- (<span class="built_in">BOOL</span>)isBold &#123;</div><div class="line">  <span class="keyword">return</span> ([<span class="keyword">self</span> fontTraits] &amp; <span class="built_in">NSFontBoldTrait</span>) ? <span class="literal">YES</span> : <span class="literal">NO</span>;</div><div class="line">&#125;</div><div class="line">- (<span class="built_in">BOOL</span>)isValid &#123;</div><div class="line">  <span class="keyword">return</span> [<span class="keyword">self</span> stringValue] != <span class="literal">nil</span>;</div><div class="line">&#125;</div><div class="line">- (<span class="built_in">BOOL</span>)isEnabled &#123;</div><div class="line">  <span class="keyword">return</span> [<span class="keyword">self</span> isValid] &amp;&amp; [<span class="keyword">self</span> isBold];</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>Also, don’t directly compare <code>BOOL</code> variables directly with <code>YES</code>. Not only is it harder to read for those well-versed in C, the first point above demonstrates that return values may not always be what you expect.<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//avoid</span></div><div class="line"><span class="built_in">BOOL</span> great = [foo isGreat];</div><div class="line"><span class="keyword">if</span> (great == <span class="literal">YES</span>)</div><div class="line">  <span class="comment">// ...be great!</span></div><div class="line"></div><div class="line"><span class="comment">//good</span></div><div class="line"><span class="built_in">BOOL</span> great = [foo isGreat];</div><div class="line"><span class="keyword">if</span> (great)</div><div class="line">  <span class="comment">// ...be great!</span></div></pre></td></tr></table></figure></p>
<h3 id="Properties"><a href="#Properties" class="headerlink" title="Properties"></a>Properties</h3><p>Use of the @property directive is preferred, with the following caveat: properties are an Objective-C 2.0 feature which will limit your code to running on the iPhone and Mac OS X 10.5 (Leopard) and higher. Dot notation is allowed only for access to a declared <code>@property</code>.</p>
<h4 id="Naming-1"><a href="#Naming-1" class="headerlink" title="Naming"></a>Naming</h4><p>A property’s associated instance variable’s name must conform to the leading _ requirement. The property’s name should be the same as its associated instance variable without the leading _. The optional space between the @property and the opening parenthesis should be omitted, as seen in the examples.<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">MyClass</span> : <span class="title">NSObject</span></span></div><div class="line"><span class="keyword">@property</span>(<span class="keyword">copy</span>, <span class="keyword">nonatomic</span>) <span class="built_in">NSString</span> *name;</div><div class="line"><span class="keyword">@end</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">MyClass</span></span></div><div class="line"><span class="comment">// No code required for auto-synthesis, else use:</span></div><div class="line"><span class="comment">//   @synthesize name = _name;</span></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure></p>
<h4 id="Location"><a href="#Location" class="headerlink" title="Location"></a>Location</h4><p>A property’s declaration must come immediately after the instance variable block of a class interface. A property’s definition (if not using automatic synthesis) must come immediately after the <code>@implementation</code> block in a class definition. They are indented at the same level as the <code>@interface</code> or <code>@implementation</code> statements that they are enclosed in.<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">MyClass</span> : <span class="title">NSObject</span> </span>&#123;</div><div class="line"> <span class="keyword">@private</span></div><div class="line">  <span class="built_in">NSString</span> *_name;</div><div class="line">&#125;</div><div class="line"><span class="keyword">@property</span>(<span class="keyword">copy</span>, <span class="keyword">nonatomic</span>) <span class="built_in">NSString</span> *name;</div><div class="line"><span class="keyword">@end</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">MyClass</span></span></div><div class="line"><span class="keyword">@synthesize</span> name = _name;</div><div class="line"></div><div class="line">- (<span class="keyword">instancetype</span>)init &#123;</div><div class="line">  ...</div><div class="line">&#125;</div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure></p>
<h4 id="Use-Copy-Attribute-For-Strings"><a href="#Use-Copy-Attribute-For-Strings" class="headerlink" title="Use Copy Attribute For Strings"></a>Use Copy Attribute For Strings</h4><p>NSString properties should always be declared with the <code>copy</code> attribute.<br>This logically follows from the requirement that setters for NSStrings always must use <code>copy</code> instead of <code>retain</code>.</p>
<h4 id="Atomicity"><a href="#Atomicity" class="headerlink" title="Atomicity"></a>Atomicity</h4><p>Be aware of the overhead of properties. By default, all synthesized setters and getters are atomic. This gives each set and get calls a substantial amount of synchronization overhead. Declare your properties <code>nonatomic</code> unless you require atomicity.</p>
<h4 id="Dot-notation"><a href="#Dot-notation" class="headerlink" title="Dot notation"></a>Dot notation</h4><p>Dot notation is idiomatic style for Objective-C 2.0. It may be used when doing simple operations to get and set a <code>@property</code> of an object, but should not be used to invoke other object behavior.<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">NSString</span> *oldName = myObject.name;</div><div class="line">myObject.name = <span class="string">@"Alice"</span>;</div><div class="line"></div><div class="line"><span class="comment">//avoid</span></div><div class="line"><span class="built_in">NSArray</span> *array = [[<span class="built_in">NSArray</span> arrayWithObject:<span class="string">@"hello"</span>] <span class="keyword">retain</span>];</div><div class="line"></div><div class="line"><span class="built_in">NSUInteger</span> numberOfItems = array.count;  <span class="comment">// not a property</span></div><div class="line">array.release;                           <span class="comment">// not a property</span></div></pre></td></tr></table></figure></p>
<h3 id="Interfaces-Without-Instance-Variables"><a href="#Interfaces-Without-Instance-Variables" class="headerlink" title="Interfaces Without Instance Variables"></a>Interfaces Without Instance Variables</h3><p>Omit the empty set of braces on interfaces that do not declare any instance variables.<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">MyClass</span> : <span class="title">NSObject</span></span></div><div class="line">.     <span class="comment">// Does a lot of stuff</span></div><div class="line">     - (<span class="keyword">void</span>)fooBarBam;</div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure></p>
<h3 id="Automatically-Synthesized-Instance-Variables"><a href="#Automatically-Synthesized-Instance-Variables" class="headerlink" title="Automatically Synthesized Instance Variables"></a>Automatically Synthesized Instance Variables</h3><p>Use of automatically synthesized instance variables is preferred. Code that must support earlier versions of the compiler toolchain (Xcode 4.3 or earlier or when compiling with GCC) or is using properties inherited from a protocol should prefer the @synthesize directive.<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Header file</span></div><div class="line"><span class="class"><span class="keyword">@protocol</span> <span class="title">Thingy</span></span></div><div class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>, <span class="keyword">copy</span>) <span class="built_in">NSString</span> *widgetName;</div><div class="line"><span class="keyword">@end</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">Foo</span> : <span class="title">NSObject</span>&lt;<span class="title">Thingy</span>&gt;</span></div><div class="line"><span class="comment">// A guy walks into a bar.</span></div><div class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>, <span class="keyword">copy</span>) <span class="built_in">NSString</span> *bar;</div><div class="line"><span class="keyword">@end</span></div><div class="line"></div><div class="line"><span class="comment">// Implementation file</span></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">Foo</span> ()</span></div><div class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>, <span class="keyword">retain</span>) <span class="built_in">NSArray</span> *baz;</div><div class="line"><span class="keyword">@end</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">Foo</span></span></div><div class="line"><span class="keyword">@synthesize</span> widgetName = _widgetName;</div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure></p>
<p>Automatically synthesized instance variables take the form of the property’s name prefixed with an underscore and so typically conform to the required variable naming style. If your property name is unusual, or you are otherwise unable to use automatically synthesized instance variables, use of the @synthesize directive is preferred, with the instance variable name specified explicitly (as @synthesize does not add a leading underscore by default).</p>
<h3 id="Automatic-Reference-Counting-ARC"><a href="#Automatic-Reference-Counting-ARC" class="headerlink" title="Automatic Reference Counting (ARC)"></a>Automatic Reference Counting (ARC)</h3><p>For projects that use Xcode 4.2 or later and will run only on 64-bit Mac OS X 10.7 and iOS 5.0 and later, ARC is preferred. Use manual reference counting when supporting earlier environments where zeroing weak pointers are not available.<br>Classes that require ARC should include a preprocessor directive to prevent compilation using manual reference counting.<br>Ownership qualifiers like <code>__unsafe_unretained</code> and <code>__weak</code> should precede variable names. Specifying <code>__strong</code> for variables is not required since it is the default. Properties, on the other hand, should always specify the strong keyword rather than relying on the compiler default.<br>Files that are compiled using ARC need to have preprocessor directives to prevent compilation without ARC. See the code snippet below for details.<br>Example of an implementation file enforcing ARC style. Note that declaring instance variables in the @implementation is permitted when using ARC.<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#if !defined(__has_feature) || !__has_feature(objc_arc)</span></div><div class="line"><span class="meta">#error <span class="meta-string">"This file requires ARC support."</span></span></div><div class="line"><span class="meta">#endif</span></div><div class="line"></div><div class="line"><span class="meta">#import <span class="meta-string">"Foo.h"</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">Foo</span> </span>&#123;</div><div class="line">  Bar* __<span class="keyword">weak</span> _bar;</div><div class="line">  Baz* __<span class="keyword">unsafe_unretained</span> _baz;</div><div class="line">&#125;</div><div class="line"><span class="comment">// ...</span></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure></p>
<h3 id="NSNumber-Literals"><a href="#NSNumber-Literals" class="headerlink" title="NSNumber Literals"></a>NSNumber Literals</h3><p>For projects that use Xcode 4.4 or later with clang, the use of <a href="http://clang.llvm.org/docs/ObjectiveCLiterals.html" target="_blank" rel="external">NSNumber literals</a> is allowed. Note however that this will limit the portability of your code to other toolchains.<br>NSNumber literals are used just like Objective C string literals. Boxing is used when necessary. Code using NSNumber literals can be deployed on any iOS/MacOS system.<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">NSNumber</span> *fortyTwo = @<span class="number">42</span>;</div><div class="line"><span class="built_in">NSNumber</span> *piOverTwo = @(M_PI / <span class="number">2</span>);</div><div class="line"><span class="keyword">enum</span> &#123;</div><div class="line">  kMyEnum = <span class="number">2</span>;</div><div class="line">&#125;;</div><div class="line"><span class="built_in">NSNumber</span> *myEnum = @(kMyEnum);</div></pre></td></tr></table></figure></p>
<h2 id="Cocoa-Patterns"><a href="#Cocoa-Patterns" class="headerlink" title="Cocoa Patterns"></a>Cocoa Patterns</h2><h3 id="Delegate-Pattern"><a href="#Delegate-Pattern" class="headerlink" title="Delegate Pattern"></a>Delegate Pattern</h3><p>Delegate objects should not be retained when doing so would create a retain cycle.<br>A class that implements the delegate pattern should typically:</p>
<ol>
<li>Have an instance variable named <code>_delegate</code> to reference the delegate.</li>
<li>Thus, the accessor methods should be named <code>delegate</code> and setDelegate:.</li>
<li>The <code>_delegate</code> object should be weak if the class is typically retained by its delegate, such that a strong delegate would create a retain cycle.<h3 id="Model-View-Controller"><a href="#Model-View-Controller" class="headerlink" title="Model/View/Controller"></a>Model/View/Controller</h3>Separate the model from the view. Separate the controller from the view and the model. Use <code>@protocols</code> for callback APIs.</li>
</ol>
<ul>
<li>Separate model from view: don’t build assumptions about the presentation into the model or data source. Keep the interface between the data source and the presentation abstract. Don’t give the model knowledge of its view. (A good rule of thumb is to ask yourself if it’s possible to have multiple presentations, with different states, on a single instance of your data source.)</li>
<li>Separate controller from view and model: don’t put all of the “business logic” into view-related classes; this makes the code very unusable. Make controller classes to host this code, but ensure that the controller classes don’t make too many assumptions about the presentation.</li>
<li>Define callback APIs with <code>@protocol</code>, using <code>@optional</code> if not all the methods are required.<h2 id="Historical-Notes"><a href="#Historical-Notes" class="headerlink" title="Historical Notes"></a>Historical Notes</h2><h3 id="Trailing-vs-Leading-Underscores"><a href="#Trailing-vs-Leading-Underscores" class="headerlink" title="Trailing vs Leading Underscores"></a>Trailing vs Leading Underscores</h3>Trailing underscores were once preferred for instance variable names.<br>Our style guide used to have a rule saying that instance variables should be named with a trailing underscore, similar to the naming of member variables in C++. This was changed to leading underscores to be consistent with the broader Objective-C community, to better follow Apple’s official guidelines, and to allow for use of new compiler features like automatic instance variable synthesis. New projects are strongly encouraged to use leading underscores. Existing projects may continue to use trailing underscores in new code to maintain consistency with the rest of their codebase.</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;This is &lt;a href=&quot;https://google.github.io/styleguide/objcguide.xml&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Google Objective-C Style Guide
    
    </summary>
    
    
      <category term="Objective-C" scheme="http://yoursite.com/tags/Objective-C/"/>
    
  </entry>
  
  <entry>
    <title>swift style guide</title>
    <link href="http://yoursite.com/2017/04/08/2017-04-08-swift-style-guide/"/>
    <id>http://yoursite.com/2017/04/08/2017-04-08-swift-style-guide/</id>
    <published>2017-04-08T13:10:37.000Z</published>
    <updated>2017-04-08T14:46:23.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="This-is-LinkedIn’s-Official-Swift-Style-Guide"><a href="#This-is-LinkedIn’s-Official-Swift-Style-Guide" class="headerlink" title="This is LinkedIn’s Official Swift Style Guide"></a><strong>This is <a href="https://github.com/kwongfung/swift-style-guide.git" target="_blank" rel="external">LinkedIn’s Official Swift Style Guide</a></strong></h2><p>Make sure to read <a href="https://swift.org/documentation/api-design-guidelines/" target="_blank" rel="external">Apple’s API Design Guidelines</a>.<br>Specifics from these guidelines + additional remarks are mentioned below.<br>This guide was last updated for Swift 3.0 on January 14th, 2017.</p>
<h2 id="Code-Formatting"><a href="#Code-Formatting" class="headerlink" title="Code Formatting"></a>Code Formatting</h2><ul>
<li>Use 4 spaces for tabs.</li>
<li>Avoid uncomfortably long lines with a hard maximum of 160 characters per line (Xcode->Preferences->Text Editing->Page guide at column: 160 is helpful for this)</li>
<li>Ensure that there is a newline at the end of every file.</li>
<li>Ensure that there is no trailing whitespace anywhere (Xcode->Preferences->Text Editing->Automatically trim trailing whitespace + Including whitespace-only lines).</li>
<li><p>Do not place opening braces on new lines - we use the <a href="https://en.m.wikipedia.org/wiki/Indent_style#Variant:_1TBS" target="_blank" rel="external">1TBS style</a>.</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">SomeClass</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">someMethod</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">if</span> x == y &#123;</div><div class="line">            <span class="comment">/* ... */</span></div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> x == z &#123;</div><div class="line">            <span class="comment">/* ... */</span></div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="comment">/* ... */</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/* ... */</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>When writing a type for a property, constant, variable, a key for a dictionary, a function argument, a protocol conformance, or a superclass, don’t add a space before the colon.</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// specifying type</span></div><div class="line"><span class="keyword">let</span> pirateViewController: <span class="type">PirateViewController</span></div><div class="line"></div><div class="line"><span class="comment">// dictionary syntax (note that we left-align as opposed to aligning colons)</span></div><div class="line"><span class="keyword">let</span> ninjaDictionary: [<span class="type">String</span>: <span class="type">AnyObject</span>] = [</div><div class="line">    <span class="string">"fightLikeDairyFarmer"</span>: <span class="literal">false</span>,</div><div class="line">    <span class="string">"disgusting"</span>: <span class="literal">true</span></div><div class="line">]</div><div class="line"></div><div class="line"><span class="comment">// declaring a function</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">myFunction</span>&lt;T, U: SomeProtocol&gt;<span class="params">(firstArgument: U, secondArgument: T)</span></span> <span class="keyword">where</span> <span class="type">T</span>.<span class="type">RelatedType</span> == <span class="type">U</span> &#123;</div><div class="line">    <span class="comment">/* ... */</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// calling a function</span></div><div class="line">someFunction(someArgument: <span class="string">"Kitten"</span>)</div><div class="line"></div><div class="line"><span class="comment">// superclasses</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">PirateViewController</span>: <span class="title">UIViewController</span> </span>&#123;</div><div class="line">    <span class="comment">/* ... */</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// protocols</span></div><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">PirateViewController</span>: <span class="title">UITableViewDataSource</span> </span>&#123;</div><div class="line">    <span class="comment">/* ... */</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>In general, there should be a space following a comma.</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> myArray = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</div></pre></td></tr></table></figure>
</li>
<li><p>There should be a space before and after a binary operator such as <code>+</code>, <code>==</code>, or <code>-&gt;</code>. There should also not be a space after a <code>(</code> and before a <code>)</code>.</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> myValue = <span class="number">20</span> + (<span class="number">30</span> / <span class="number">2</span>) * <span class="number">3</span></div><div class="line"><span class="keyword">if</span> <span class="number">1</span> + <span class="number">1</span> == <span class="number">3</span> &#123;</div><div class="line">    <span class="built_in">fatalError</span>(<span class="string">"The universe is broken."</span>)</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">pancake</span><span class="params">(with syrup: Syrup)</span></span> -&gt; <span class="type">Pancake</span> &#123;</div><div class="line">    <span class="comment">/* ... */</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>We follow Xcode’s recommended indentation style (i.e. your code should not change if CTRL-I is pressed). When declaring a function that spans multiple lines, prefer using that syntax to which Xcode, as of version 7.3, defaults.</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Xcode indentation for a function declaration that spans multiple lines</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">myFunctionWithManyParameters</span><span class="params">(parameterOne: String,</span></span></div><div class="line">                                  parameterTwo: String,</div><div class="line">                                  parameterThree: String) &#123;</div><div class="line">    <span class="comment">// Xcode indents to here for this kind of statement</span></div><div class="line">    <span class="built_in">print</span>(<span class="string">"\(parameterOne) \(parameterTwo) \(parameterThree)"</span>)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// Xcode indentation for a multi-line `if` statement</span></div><div class="line"><span class="keyword">if</span> myFirstValue &gt; (mySecondValue + myThirdValue)</div><div class="line">    &amp;&amp; myFourthValue == .someEnumValue &#123;</div><div class="line"></div><div class="line">    <span class="comment">// Xcode indents to here for this kind of statement</span></div><div class="line">    <span class="built_in">print</span>(<span class="string">"Hello, World!"</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>When calling a function that has many parameters, put each argument on a separate line with a single extra indentation.</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">someFunctionWithManyArguments(</div><div class="line">    firstArgument: <span class="string">"Hello, I am a string"</span>,</div><div class="line">    secondArgument: resultFromSomeFunction(),</div><div class="line">    thirdArgument: someOtherLocalProperty)</div></pre></td></tr></table></figure>
</li>
<li><p>When dealing with an implicit array or dictionary large enough to warrant splitting it into multiple lines, treat the <code>[</code> and <code>]</code> as if they were braces in a method, <code>if</code> statement, etc. Closures in a method should be treated similarly.</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">someFunctionWithABunchOfArguments(</div><div class="line">    someStringArgument: <span class="string">"hello I am a string"</span>,</div><div class="line">    someArrayArgument: [</div><div class="line">        <span class="string">"dadada daaaa daaaa dadada daaaa daaaa dadada daaaa daaaa"</span>,</div><div class="line">        <span class="string">"string one is crazy - what is it thinking?"</span></div><div class="line">    ],</div><div class="line">    someDictionaryArgument: [</div><div class="line">        <span class="string">"dictionary key 1"</span>: <span class="string">"some value 1, but also some more text here"</span>,</div><div class="line">        <span class="string">"dictionary key 2"</span>: <span class="string">"some value 2"</span></div><div class="line">    ],</div><div class="line">    someClosure: &#123; parameter1 <span class="keyword">in</span></div><div class="line">        <span class="built_in">print</span>(parameter1)</div><div class="line">    &#125;)</div></pre></td></tr></table></figure>
</li>
<li><p>Prefer using local constants or other mitigation techniques to avoid multi-line predicates where possible.</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// PREFERRED</span></div><div class="line"><span class="keyword">let</span> firstCondition = x == firstReallyReallyLongPredicateFunction()</div><div class="line"><span class="keyword">let</span> secondCondition = y == secondReallyReallyLongPredicateFunction()</div><div class="line"><span class="keyword">let</span> thirdCondition = z == thirdReallyReallyLongPredicateFunction()</div><div class="line"><span class="keyword">if</span> firstCondition &amp;&amp; secondCondition &amp;&amp; thirdCondition &#123;</div><div class="line">    <span class="comment">// do something</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// NOT PREFERRED</span></div><div class="line"><span class="keyword">if</span> x == firstReallyReallyLongPredicateFunction()</div><div class="line">    &amp;&amp; y == secondReallyReallyLongPredicateFunction()</div><div class="line">    &amp;&amp; z == thirdReallyReallyLongPredicateFunction() &#123;</div><div class="line">    <span class="comment">// do something</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="Naming"><a href="#Naming" class="headerlink" title="Naming"></a>Naming</h2><ul>
<li>There is no need for Objective-C style prefixing in Swift (e.g. use just <code>GuybrushThreepwood</code> instead of <code>LIGuybrushThreepwood</code>).</li>
<li>Use <code>PascalCase</code> for type names (e.g. <code>struct</code>, <code>enum</code>, <code>class</code>, <code>typedef</code>, <code>associatedtype</code>, etc.).</li>
<li>Use <code>camelCase</code> (initial lowercase letter) for function, method, property, constant, variable, argument names, enum cases, etc.).</li>
<li><p>When dealing with an acronym or other name that is usually written in all caps, actually use all caps in any names that use this in code. The exception is if this word is at the start of a name that needs to start with lowercase - in this case, use all lowercase for the acronym.</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// "HTML" is at the start of a constant name, so we use lowercase "html"</span></div><div class="line"><span class="keyword">let</span> htmlBodyContent: <span class="type">String</span> = <span class="string">"&lt;p&gt;Hello, World!&lt;/p&gt;"</span></div><div class="line"><span class="comment">// Prefer using ID to Id</span></div><div class="line"><span class="keyword">let</span> profileID: <span class="type">Int</span> = <span class="number">1</span></div><div class="line"><span class="comment">// Prefer URLFinder to UrlFinder</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">URLFinder</span> </span>&#123;</div><div class="line">    <span class="comment">/* ... */</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>All constants other than singletons that are instance-independent should be <code>static</code>. All such <code>static</code> constants should be placed in a container <code>enum</code> type as per rule <strong>3.1.16</strong>. The naming of this container should be singular (e.g. <code>Constant</code> and not <code>Constants</code>) and it should be named such that it is relatively obvious that it is a constant container. If this is not obvious, you can add a <code>Constant</code> suffix to the name. You should use these containers to group constants that have similar or the same prefixes, suffixes and/or use cases.</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClassName</span> </span>&#123;</div><div class="line">    <span class="comment">// PREFERRED</span></div><div class="line">    <span class="class"><span class="keyword">enum</span> <span class="title">AccessibilityIdentifier</span> </span>&#123;</div><div class="line">        <span class="keyword">static</span> <span class="keyword">let</span> pirateButton = <span class="string">"pirate_button"</span></div><div class="line">    &#125;</div><div class="line">    <span class="class"><span class="keyword">enum</span> <span class="title">SillyMathConstant</span> </span>&#123;</div><div class="line">        <span class="keyword">static</span> <span class="keyword">let</span> indianaPi = <span class="number">3</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">static</span> <span class="keyword">let</span> shared = <span class="type">MyClassName</span>()</div><div class="line"></div><div class="line">    <span class="comment">// NOT PREFERRED</span></div><div class="line">    <span class="keyword">static</span> <span class="keyword">let</span> kPirateButtonAccessibilityIdentifier = <span class="string">"pirate_button"</span></div><div class="line">    <span class="class"><span class="keyword">enum</span> <span class="title">SillyMath</span> </span>&#123;</div><div class="line">        <span class="keyword">static</span> <span class="keyword">let</span> indianaPi = <span class="number">3</span></div><div class="line">    &#125;</div><div class="line">    <span class="class"><span class="keyword">enum</span> <span class="title">Singleton</span> </span>&#123;</div><div class="line">        <span class="keyword">static</span> <span class="keyword">let</span> shared = <span class="type">MyClassName</span>()</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>For generics and associated types, use either a single capital letter or a <code>PascalCase</code> word that describes the generic. If this word clashes with a protocol that it conforms to or a superclass that it subclasses, you can append a <code>Type</code> suffix to the associated type or generic name.</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">SomeClass</span>&lt;<span class="title">T</span>&gt; </span>&#123; <span class="comment">/* ... */</span> &#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">SomeClass</span>&lt;<span class="title">Model</span>&gt; </span>&#123; <span class="comment">/* ... */</span> &#125;</div><div class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">Modelable</span> </span>&#123;</div><div class="line">    associatedtype <span class="type">Model</span></div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">Sequence</span> </span>&#123;</div><div class="line">    associatedtype <span class="type">IteratorType</span>: <span class="type">Iterator</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>Names should be descriptive and unambiguous.</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// PREFERRED</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">RoundAnimatingButton</span>: <span class="title">UIButton</span> </span>&#123; <span class="comment">/* ... */</span> &#125;</div><div class="line"></div><div class="line"><span class="comment">// NOT PREFERRED</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">CustomButton</span>: <span class="title">UIButton</span> </span>&#123; <span class="comment">/* ... */</span> &#125;</div></pre></td></tr></table></figure>
</li>
<li><p>Do not abbreviate, use shortened names, or single letter names.</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// PREFERRED</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">RoundAnimatingButton</span>: <span class="title">UIButton</span> </span>&#123;</div><div class="line">    <span class="keyword">let</span> animationDuration: <span class="type">NSTimeInterval</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">startAnimating</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">let</span> firstSubview = subviews.first</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// NOT PREFERRED</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">RoundAnimating</span>: <span class="title">UIButton</span> </span>&#123;</div><div class="line">    <span class="keyword">let</span> aniDur: <span class="type">NSTimeInterval</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">srtAnmating</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">let</span> v = subviews.first</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>Include type information in constant or variable names when it is not obvious otherwise.</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// PREFERRED</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConnectionTableViewCell</span>: <span class="title">UITableViewCell</span> </span>&#123;</div><div class="line">    <span class="keyword">let</span> personImageView: <span class="type">UIImageView</span></div><div class="line"></div><div class="line">    <span class="keyword">let</span> animationDuration: <span class="type">TimeInterval</span></div><div class="line"></div><div class="line">    <span class="comment">// it is ok not to include string in the ivar name here because it's obvious</span></div><div class="line">    <span class="comment">// that it's a string from the property name</span></div><div class="line">    <span class="keyword">let</span> firstName: <span class="type">String</span></div><div class="line"></div><div class="line">    <span class="comment">// though not preferred, it is OK to use `Controller` instead of `ViewController`</span></div><div class="line">    <span class="keyword">let</span> popupController: <span class="type">UIViewController</span></div><div class="line">    <span class="keyword">let</span> popupViewController: <span class="type">UIViewController</span></div><div class="line"></div><div class="line">    <span class="comment">// when working with a subclass of `UIViewController` such as a table view</span></div><div class="line">    <span class="comment">// controller, collection view controller, split view controller, etc.,</span></div><div class="line">    <span class="comment">// fully indicate the type in the name.</span></div><div class="line">    <span class="keyword">let</span> popupTableViewController: <span class="type">UITableViewController</span></div><div class="line"></div><div class="line">    <span class="comment">// when working with outlets, make sure to specify the outlet type in the</span></div><div class="line">    <span class="comment">// property name.</span></div><div class="line">    <span class="meta">@IBOutlet</span> <span class="keyword">weak</span> <span class="keyword">var</span> submitButton: <span class="type">UIButton</span>!</div><div class="line">    <span class="meta">@IBOutlet</span> <span class="keyword">weak</span> <span class="keyword">var</span> emailTextField: <span class="type">UITextField</span>!</div><div class="line">    <span class="meta">@IBOutlet</span> <span class="keyword">weak</span> <span class="keyword">var</span> nameLabel: <span class="type">UILabel</span>!</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// NOT PREFERRED</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConnectionTableViewCell</span>: <span class="title">UITableViewCell</span> </span>&#123;</div><div class="line">    <span class="comment">// this isn't a `UIImage`, so shouldn't be called image</span></div><div class="line">    <span class="comment">// use personImageView instead</span></div><div class="line">    <span class="keyword">let</span> personImage: <span class="type">UIImageView</span></div><div class="line"></div><div class="line">    <span class="comment">// this isn't a `String`, so it should be `textLabel`</span></div><div class="line">    <span class="keyword">let</span> text: <span class="type">UILabel</span></div><div class="line"></div><div class="line">    <span class="comment">// `animation` is not clearly a time interval</span></div><div class="line">    <span class="comment">// use `animationDuration` or `animationTimeInterval` instead</span></div><div class="line">    <span class="keyword">let</span> animation: <span class="type">TimeInterval</span></div><div class="line"></div><div class="line">    <span class="comment">// this is not obviously a `String`</span></div><div class="line">    <span class="comment">// use `transitionText` or `transitionString` instead</span></div><div class="line">    <span class="keyword">let</span> transition: <span class="type">String</span></div><div class="line"></div><div class="line">    <span class="comment">// this is a view controller - not a view</span></div><div class="line">    <span class="keyword">let</span> popupView: <span class="type">UIViewController</span></div><div class="line"></div><div class="line">    <span class="comment">// as mentioned previously, we don't want to use abbreviations, so don't use</span></div><div class="line">    <span class="comment">// `VC` instead of `ViewController`</span></div><div class="line">    <span class="keyword">let</span> popupVC: <span class="type">UIViewController</span></div><div class="line"></div><div class="line">    <span class="comment">// even though this is still technically a `UIViewController`, this property</span></div><div class="line">    <span class="comment">// should indicate that we are working with a *Table* View Controller</span></div><div class="line">    <span class="keyword">let</span> popupViewController: <span class="type">UITableViewController</span></div><div class="line"></div><div class="line">    <span class="comment">// for the sake of consistency, we should put the type name at the end of the</span></div><div class="line">    <span class="comment">// property name and not at the start</span></div><div class="line">    <span class="meta">@IBOutlet</span> <span class="keyword">weak</span> <span class="keyword">var</span> btnSubmit: <span class="type">UIButton</span>!</div><div class="line">    <span class="meta">@IBOutlet</span> <span class="keyword">weak</span> <span class="keyword">var</span> buttonSubmit: <span class="type">UIButton</span>!</div><div class="line"></div><div class="line">    <span class="comment">// we should always have a type in the property name when dealing with outlets</span></div><div class="line">    <span class="comment">// for example, here, we should have `firstNameLabel` instead</span></div><div class="line">    <span class="meta">@IBOutlet</span> <span class="keyword">weak</span> <span class="keyword">var</span> firstName: <span class="type">UILabel</span>!</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>When naming function arguments, make sure that the function can be read easily to understand the purpose of each argument.</p>
</li>
<li>As per <a href="https://swift.org/documentation/api-design-guidelines/" target="_blank" rel="external">Apple’s API Design Guidelines</a>, a <code>protocol</code> should be named as nouns if they describe what something is doing (e.g. <code>Collection</code>) and using the suffixes <code>able</code>, <code>ible</code>, or <code>ing</code> if it describes a capability (e.g. <code>Equatable</code>, <code>ProgressReporting</code>). If neither of those options makes sense for your use case, you can add a <code>Protocol</code> suffix to the protocol’s name as well. Some example <code>protocol</code>s are below.<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// here, the name is a noun that describes what the protocol does</span></div><div class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">TableViewSectionProvider</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">rowHeight</span><span class="params">(at row: Int)</span></span> -&gt; <span class="type">CGFloat</span></div><div class="line">    <span class="keyword">var</span> numberOfRows: <span class="type">Int</span> &#123; <span class="keyword">get</span> &#125;</div><div class="line">    <span class="comment">/* ... */</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// here, the protocol is a capability, and we name it appropriately</span></div><div class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">Loggable</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">logCurrentState</span><span class="params">()</span></span></div><div class="line">    <span class="comment">/* ... */</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// suppose we have an `InputTextView` class, but we also want a protocol</span></div><div class="line"><span class="comment">// to generalize some of the functionality - it might be appropriate to</span></div><div class="line"><span class="comment">// use the `Protocol` suffix here</span></div><div class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">InputTextViewProtocol</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">sendTrackingEvent</span><span class="params">()</span></span></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">inputText</span><span class="params">()</span></span> -&gt; <span class="type">String</span></div><div class="line">    <span class="comment">/* ... */</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="Coding-Style"><a href="#Coding-Style" class="headerlink" title="Coding Style"></a>Coding Style</h2><h3 id="General"><a href="#General" class="headerlink" title="General"></a>General</h3><ul>
<li>Prefer <code>let</code> to <code>var</code> whenever possible.</li>
<li><p>Prefer the composition of <code>map</code>, <code>filter</code>, <code>reduce</code>, etc. over iterating when transforming from one collection to another. Make sure to avoid using closures that have side effects when using these methods.</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// PREFERRED</span></div><div class="line"><span class="keyword">let</span> stringOfInts = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].flatMap &#123; <span class="type">String</span>($<span class="number">0</span>) &#125;</div><div class="line"><span class="comment">// ["1", "2", "3"]</span></div><div class="line"></div><div class="line"><span class="comment">// NOT PREFERRED</span></div><div class="line"><span class="keyword">var</span> stringOfInts: [<span class="type">String</span>] = []</div><div class="line"><span class="keyword">for</span> integer <span class="keyword">in</span> [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>] &#123;</div><div class="line">    stringOfInts.append(<span class="type">String</span>(integer))</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// PREFERRED</span></div><div class="line"><span class="keyword">let</span> evenNumbers = [<span class="number">4</span>, <span class="number">8</span>, <span class="number">15</span>, <span class="number">16</span>, <span class="number">23</span>, <span class="number">42</span>].<span class="built_in">filter</span> &#123; $<span class="number">0</span> % <span class="number">2</span> == <span class="number">0</span> &#125;</div><div class="line"><span class="comment">// [4, 8, 16, 42]</span></div><div class="line"></div><div class="line"><span class="comment">// NOT PREFERRED</span></div><div class="line"><span class="keyword">var</span> evenNumbers: [<span class="type">Int</span>] = []</div><div class="line"><span class="keyword">for</span> integer <span class="keyword">in</span> [<span class="number">4</span>, <span class="number">8</span>, <span class="number">15</span>, <span class="number">16</span>, <span class="number">23</span>, <span class="number">42</span>] &#123;</div><div class="line">    <span class="keyword">if</span> integer % <span class="number">2</span> == <span class="number">0</span> &#123;</div><div class="line">        evenNumbers.append(integer)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>Prefer not declaring types for constants or variables if they can be inferred anyway.</p>
</li>
<li><p>If a function returns multiple values, prefer returning a tuple to using <code>inout</code> arguments (it’s best to use labeled tuples for clarity on what you’re returning if it is not otherwise obvious). If you use a certain tuple more than once, consider using a <code>typealias</code>. If you’re returning 3 or more items in a tuple, consider using a <code>struct</code> or <code>class</code> instead.</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">pirateName</span><span class="params">()</span></span> -&gt; (firstName: <span class="type">String</span>, lastName: <span class="type">String</span>) &#123;</div><div class="line">    <span class="keyword">return</span> (<span class="string">"Guybrush"</span>, <span class="string">"Threepwood"</span>)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">let</span> name = pirateName()</div><div class="line"><span class="keyword">let</span> firstName = name.firstName</div><div class="line"><span class="keyword">let</span> lastName = name.lastName</div></pre></td></tr></table></figure>
</li>
<li><p>Be wary of retain cycles when creating delegates/protocols for your classes; typically, these properties should be declared <code>weak</code>.</p>
</li>
<li><p>Be careful when calling <code>self</code> directly from an escaping closure as this can cause a retain cycle - use a <a href="https://developer.apple.com/library/ios/documentation/swift/conceptual/Swift_Programming_Language/Closures.html#//apple_ref/doc/uid/TP40014097-CH11-XID_163" target="_blank" rel="external">capture list</a> when this might be the case:</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">myFunctionWithEscapingClosure() &#123; [<span class="keyword">weak</span> <span class="keyword">self</span>] (error) -&gt; <span class="type">Void</span> <span class="keyword">in</span></div><div class="line">    <span class="comment">// you can do this</span></div><div class="line"></div><div class="line">    <span class="keyword">self</span>?.doSomething()</div><div class="line"></div><div class="line">    <span class="comment">// or you can do this</span></div><div class="line"></div><div class="line">    <span class="keyword">guard</span> <span class="keyword">let</span> strongSelf = <span class="keyword">self</span> <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">return</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    strongSelf.doSomething()</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>Don’t use labeled breaks.</p>
</li>
<li><p>Don’t place parentheses around control flow predicates.</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// PREFERRED</span></div><div class="line"><span class="keyword">if</span> x == y &#123;</div><div class="line">    <span class="comment">/* ... */</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// NOT PREFERRED</span></div><div class="line"><span class="keyword">if</span> (x == y) &#123;</div><div class="line">    <span class="comment">/* ... */</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>Avoid writing out an <code>enum</code> type where possible - use shorthand.</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// PREFERRED</span></div><div class="line">imageView.setImageWithURL(url, type: .person)</div><div class="line"></div><div class="line"><span class="comment">// NOT PREFERRED</span></div><div class="line">imageView.setImageWithURL(url, type: <span class="type">AsyncImageView</span>.<span class="type">Type</span>.person)</div></pre></td></tr></table></figure>
</li>
<li><p>Don’t use shorthand for class methods since it is generally more difficult to infer the context from class methods as opposed to <code>enum</code>s.</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// PREFERRED</span></div><div class="line">imageView.backgroundColor = <span class="type">UIColor</span>.white</div><div class="line"></div><div class="line"><span class="comment">// NOT PREFERRED</span></div><div class="line">imageView.backgroundColor = .white</div></pre></td></tr></table></figure>
</li>
<li><p>Prefer not writing <code>self.</code> unless it is required.</p>
</li>
<li>When writing methods, keep in mind whether the method is intended to be overridden or not. If not, mark it as <code>final</code>, though keep in mind that this will prevent the method from being overwritten for testing purposes. In general, <code>final</code> methods result in improved compilation times, so it is good to use this when applicable. Be particularly careful, however, when applying the <code>final</code> keyword in a library since it is non-trivial to change something to be non-<code>final</code> in a library as opposed to have changing something to be non-<code>final</code> in your local project.</li>
<li><p>When using a statement such as <code>else</code>, <code>catch</code>, etc. that follows a block, put this keyword on the same line as the block. Again, we are following the <a href="https://en.m.wikipedia.org/wiki/Indent_style#Variant:_1TBS" target="_blank" rel="external">1TBS style</a> here. Example <code>if</code>/<code>else</code> and <code>do</code>/<code>catch</code> code is below.</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> someBoolean &#123;</div><div class="line">    <span class="comment">// do something</span></div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">    <span class="comment">// do something else</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">do</span> &#123;</div><div class="line">    <span class="keyword">let</span> fileContents = <span class="keyword">try</span> readFile(<span class="string">"filename.txt"</span>)</div><div class="line">&#125; <span class="keyword">catch</span> &#123;</div><div class="line">    <span class="built_in">print</span>(error)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>Prefer <code>static</code> to <code>class</code> when declaring a function or property that is associated with a class as opposed to an instance of that class. Only use <code>class</code> if you specifically need the functionality of overriding that function or property in a subclass, though consider using a <code>protocol</code> to achieve this instead.</p>
</li>
<li>If you have a function that takes no arguments, has no side effects, and returns some object or value, prefer using a computed property instead.</li>
<li>For the purpose of namespacing a set of <code>static</code> functions and/or <code>static</code> properties, prefer using a caseless <code>enum</code> over a <code>class</code> or a <code>struct</code>. This way, you don’t have to add a <code>private init() { }</code> to the container.<h3 id="Access-Modifiers"><a href="#Access-Modifiers" class="headerlink" title="Access Modifiers"></a>Access Modifiers</h3></li>
<li><p>Write the access modifier keyword first if it is needed.</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// PREFERRED</span></div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">let</span> myPrivateNumber: <span class="type">Int</span></div><div class="line"></div><div class="line"><span class="comment">// NOT PREFERRED</span></div><div class="line"><span class="keyword">static</span> <span class="keyword">private</span> <span class="keyword">let</span> myPrivateNumber: <span class="type">Int</span></div></pre></td></tr></table></figure>
</li>
<li><p>The access modifier keyword should not be on a line by itself - keep it inline with what it is describing.</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// PREFERRED</span></div><div class="line">open <span class="class"><span class="keyword">class</span> <span class="title">Pirate</span> </span>&#123;</div><div class="line">    <span class="comment">/* ... */</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// NOT PREFERRED</span></div><div class="line">open</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Pirate</span> </span>&#123;</div><div class="line">    <span class="comment">/* ... */</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>In general, do not write the <code>internal</code> access modifier keyword since it is the default.</p>
</li>
<li><p>If a property needs to be accessed by unit tests, you will have to make it <code>internal</code> to use <code>@testable import ModuleName</code>. If a property <em>should</em> be private, but you declare it to be <code>internal</code> for the purposes of unit testing, make sure you add an appropriate bit of documentation commenting that explains this. You can make use of the <code>- warning:</code> markup syntax for clarity as shown below.</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> This property defines the pirate's name.</div><div class="line"> - warning: Not `private` for `@testable`.</div><div class="line"> */</div><div class="line"><span class="keyword">let</span> pirateName = <span class="string">"LeChuck"</span></div></pre></td></tr></table></figure>
</li>
<li><p>Prefer <code>private</code> to <code>fileprivate</code> where possible.</p>
</li>
<li>When choosing between <code>public</code> and <code>open</code>, prefer <code>open</code> if you intend for something to be subclassable outside of a given module and <code>public</code> otherwise. Note that anything <code>internal</code> and above can be subclassed in tests by using <code>@testable import</code>, so this shouldn’t be a reason to use <code>open</code>. In general, lean towards being a bit more liberal with using <code>open</code> when it comes to libraries, but a bit more conservative when it comes to modules in a codebase such as an app where it is easy to change things in multiple modules simultaneously.<h3 id="Custom-Operators"><a href="#Custom-Operators" class="headerlink" title="Custom Operators"></a>Custom Operators</h3></li>
<li>Prefer creating named functions to custom operators.</li>
<li>If you want to introduce a custom operator, make sure that you have a <em>very</em> good reason why you want to introduce a new operator into global scope as opposed to using some other construct.</li>
<li>You can override existing operators to support new types (especially <code>==</code>). However, your new definitions must preserve the semantics of the operator. For example, <code>==</code> must always test equality and return a boolean.<h3 id="Switch-Statements-and-enums"><a href="#Switch-Statements-and-enums" class="headerlink" title="Switch Statements and enums"></a>Switch Statements and <code>enum</code>s</h3></li>
<li>When using a switch statement that has a finite set of possibilities (<code>enum</code>), do <em>NOT</em> include a <code>default</code> case. Instead, place unused cases at the bottom and use the <code>break</code> keyword to prevent execution.</li>
<li>Since <code>switch</code> cases in Swift break by default, do not include the <code>break</code> keyword if it is not needed.</li>
<li>The <code>case</code> statements should line up with the <code>switch</code> statement itself as per default Swift standards.</li>
<li><p>When defining a case that has an associated value, make sure that this value is appropriately labeled as opposed to just types (e.g. <code>case Hunger(hungerLevel: Int)</code> instead of <code>case Hunger(Int)</code>).</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Problem</span> </span>&#123;</div><div class="line">    <span class="keyword">case</span> attitude</div><div class="line">    <span class="keyword">case</span> hair</div><div class="line">    <span class="keyword">case</span> hunger(hungerLevel: <span class="type">Int</span>)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">handleProblem</span><span class="params">(problem: Problem)</span></span> &#123;</div><div class="line">    <span class="keyword">switch</span> problem &#123;</div><div class="line">    <span class="keyword">case</span> .attitude:</div><div class="line">        <span class="built_in">print</span>(<span class="string">"At least I don't have a hair problem."</span>)</div><div class="line">    <span class="keyword">case</span> .hair:</div><div class="line">        <span class="built_in">print</span>(<span class="string">"Your barber didn't know when to stop."</span>)</div><div class="line">    <span class="keyword">case</span> .hunger(<span class="keyword">let</span> hungerLevel):</div><div class="line">        <span class="built_in">print</span>(<span class="string">"The hunger level is \(hungerLevel)."</span>)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>Prefer lists of possibilities (e.g. <code>case 1, 2, 3:</code>) to using the <code>fallthrough</code> keyword where possible).</p>
</li>
<li>If you have a default case that shouldn’t be reached, preferably throw an error (or handle it some other similar way such as asserting).<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">handleDigit</span><span class="params">(<span class="number">_</span> digit: Int)</span></span> <span class="keyword">throws</span> &#123;</div><div class="line">    <span class="keyword">switch</span> digit &#123;</div><div class="line">    <span class="keyword">case</span> <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>:</div><div class="line">        <span class="built_in">print</span>(<span class="string">"Yes, \(digit) is a digit!"</span>)</div><div class="line">    <span class="keyword">default</span>:</div><div class="line">        <span class="keyword">throw</span> <span class="type">Error</span>(message: <span class="string">"The given number was not a digit."</span>)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="Optionals"><a href="#Optionals" class="headerlink" title="Optionals"></a>Optionals</h3><ul>
<li>The only time you should be using implicitly unwrapped optionals is with <code>@IBOutlet</code>s. In every other case, it is better to use a non-optional or regular optional property. Yes, there are cases in which you can probably “guarantee” that the property will never be <code>nil</code> when used, but it is better to be safe and consistent. Similarly, don’t use force unwraps.</li>
<li>Don’t use <code>as!</code> or <code>try!</code>.</li>
<li><p>If you don’t plan on actually using the value stored in an optional, but need to determine whether or not this value is <code>nil</code>, explicitly check this value against <code>nil</code> as opposed to using <code>if let</code> syntax.</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// PREFERERED</span></div><div class="line"><span class="keyword">if</span> someOptional != <span class="literal">nil</span> &#123;</div><div class="line">    <span class="comment">// do something</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// NOT PREFERRED</span></div><div class="line"><span class="keyword">if</span> <span class="keyword">let</span> <span class="number">_</span> = someOptional &#123;</div><div class="line">    <span class="comment">// do something</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>Don’t use <code>unowned</code>. You can think of <code>unowned</code> as somewhat of an equivalent of a <code>weak</code> property that is implicitly unwrapped (though <code>unowned</code> has slight performance improvements on account of completely ignoring reference counting). Since we don’t ever want to have implicit unwraps, we similarly don’t want <code>unowned</code> properties.</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// PREFERRED</span></div><div class="line"><span class="keyword">weak</span> <span class="keyword">var</span> parentViewController: <span class="type">UIViewController</span>?</div><div class="line"></div><div class="line"><span class="comment">// NOT PREFERRED</span></div><div class="line"><span class="keyword">weak</span> <span class="keyword">var</span> parentViewController: <span class="type">UIViewController</span>!</div><div class="line"><span class="keyword">unowned</span> <span class="keyword">var</span> parentViewController: <span class="type">UIViewController</span></div></pre></td></tr></table></figure>
</li>
<li><p>When unwrapping optionals, use the same name for the unwrapped constant or variable where appropriate.</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">guard</span> <span class="keyword">let</span> myValue = myValue <span class="keyword">else</span> &#123;</div><div class="line">    <span class="keyword">return</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="Protocols"><a href="#Protocols" class="headerlink" title="Protocols"></a>Protocols</h3><ul>
<li>When implementing protocols, there are two ways of organizing your code:</li>
</ul>
<ol>
<li>Using <code>// MARK:</code> comments to separate your protocol implementation from the rest of your code</li>
<li>Using an extension outside your <code>class</code>/<code>struct</code> implementation code, but in the same source file</li>
</ol>
<ul>
<li>Keep in mind that when using an extension, however, the methods in the extension can’t be overridden by a subclass, which can make testing difficult. If this is a common use case, it might be better to stick with method #1 for consistency. Otherwise, method #2 allows for cleaner separation of concerns.</li>
<li>Even when using method #2, add <code>// MARK:</code> statements anyway for easier readability in Xcode’s method/property/class/etc. list UI.<h3 id="Properties"><a href="#Properties" class="headerlink" title="Properties"></a>Properties</h3></li>
<li><p>If making a read-only, computed property, provide the getter without the <code>get {}</code> around it.</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> computedProperty: <span class="type">String</span> &#123;</div><div class="line">    <span class="keyword">if</span> someBool &#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"I'm a mighty pirate!"</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="string">"I'm selling these fine leather jackets."</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>When using <code>get {}</code>, <code>set {}</code>, <code>willSet</code>, and <code>didSet</code>, indent these blocks.</p>
</li>
<li><p>Though you can create a custom name for the new or old value for <code>willSet</code>/<code>didSet</code> and <code>set</code>, use the standard <code>newValue</code>/<code>oldValue</code> identifiers that are provided by default.</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> storedProperty: <span class="type">String</span> = <span class="string">"I'm selling these fine leather jackets."</span> &#123;</div><div class="line">    <span class="keyword">willSet</span> &#123;</div><div class="line">        <span class="built_in">print</span>(<span class="string">"will set to \(newValue)"</span>)</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">didSet</span> &#123;</div><div class="line">        <span class="built_in">print</span>(<span class="string">"did set from \(oldValue) to \(storedProperty)"</span>)</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> computedProperty: <span class="type">String</span>  &#123;</div><div class="line">    <span class="keyword">get</span> &#123;</div><div class="line">        <span class="keyword">if</span> someBool &#123;</div><div class="line">            <span class="keyword">return</span> <span class="string">"I'm a mighty pirate!"</span></div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> storedProperty</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">set</span> &#123;</div><div class="line">        storedProperty = newValue</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>You can declare a singleton property as follows:</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">PirateManager</span> </span>&#123;</div><div class="line">    <span class="keyword">static</span> <span class="keyword">let</span> shared = <span class="type">PirateManager</span>()</div><div class="line"></div><div class="line">    <span class="comment">/* ... */</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="Closures"><a href="#Closures" class="headerlink" title="Closures"></a>Closures</h3><ul>
<li><p>If the types of the parameters are obvious, it is OK to omit the type name, but being explicit is also OK. Sometimes readability is enhanced by adding clarifying detail and sometimes by taking repetitive parts away - use your best judgment and be consistent.</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// omitting the type</span></div><div class="line">doSomethingWithClosure() &#123; response <span class="keyword">in</span></div><div class="line">    <span class="built_in">print</span>(response)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// explicit type</span></div><div class="line">doSomethingWithClosure() &#123; response: <span class="type">NSURLResponse</span> <span class="keyword">in</span></div><div class="line">    <span class="built_in">print</span>(response)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// using shorthand in a map statement</span></div><div class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].flatMap &#123; <span class="type">String</span>($<span class="number">0</span>) &#125;</div></pre></td></tr></table></figure>
</li>
<li><p>If specifying a closure as a type, you don’t need to wrap it in parentheses unless it is required (e.g. if the type is optional or the closure is within another closure). Always wrap the arguments in the closure in a set of parentheses - use <code>()</code> to indicate no arguments and use <code>Void</code> to indicate that nothing is returned.</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> completionBlock: (<span class="type">Bool</span>) -&gt; <span class="type">Void</span> = &#123; (success) <span class="keyword">in</span></div><div class="line">    <span class="built_in">print</span>(<span class="string">"Success? \(success)"</span>)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">let</span> completionBlock: () -&gt; <span class="type">Void</span> = &#123;</div><div class="line">    <span class="built_in">print</span>(<span class="string">"Completed!"</span>)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">let</span> completionBlock: (() -&gt; <span class="type">Void</span>)? = <span class="literal">nil</span></div></pre></td></tr></table></figure>
</li>
<li><p>Keep parameter names on same line as the opening brace for closures when possible without too much horizontal overflow (i.e. ensure lines are less than 160 characters).</p>
</li>
<li>Use trailing closure syntax unless the meaning of the closure is not obvious without the parameter name (an example of this could be if a method has parameters for success and failure closures).<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// trailing closure</span></div><div class="line">doSomething(<span class="number">1.0</span>) &#123; (parameter1) <span class="keyword">in</span></div><div class="line">    <span class="built_in">print</span>(<span class="string">"Parameter 1 is \(parameter1)"</span>)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// no trailing closure</span></div><div class="line">doSomething(<span class="number">1.0</span>, success: &#123; (parameter1) <span class="keyword">in</span></div><div class="line">    <span class="built_in">print</span>(<span class="string">"Success with \(parameter1)"</span>)</div><div class="line">&#125;, failure: &#123; (parameter1) <span class="keyword">in</span></div><div class="line">    <span class="built_in">print</span>(<span class="string">"Failure with \(parameter1)"</span>)</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="Arrays"><a href="#Arrays" class="headerlink" title="Arrays"></a>Arrays</h3><ul>
<li>In general, avoid accessing an array directly with subscripts. When possible, use accessors such as <code>.first</code> or <code>.last</code>, which are optional and won’t crash. Prefer using a <code>for item in items</code> syntax when possible as opposed to something like <code>for i in 0 ..&lt; items.count</code>. If you need to access an array subscript directly, make sure to do proper bounds checking. You can use <code>for (index, value) in items.enumerated()</code> to get both the index and the value.</li>
<li>Never use the <code>+=</code> or <code>+</code> operator to append/concatenate to arrays. Instead, use <code>.append()</code> or <code>.append(contentsOf:)</code> as these are far more performant (at least with respect to compilation) in Swift’s current state. If you are declaring an array that is based on other arrays and want to keep it immutable, instead of <code>let myNewArray = arr1 + arr2</code>, use <code>let myNewArray = [arr1, arr2].flatten()</code>.<h3 id="Error-Handling"><a href="#Error-Handling" class="headerlink" title="Error Handling"></a>Error Handling</h3></li>
<li>Suppose a function <code>myFunction</code> is supposed to return a <code>String</code>, however, at some point it can run into an error. A common approach is to have this function return an optional <code>String?</code> where we return <code>nil</code> if something went wrong.</li>
<li><p>Example:</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">readFile</span><span class="params">(named filename: String)</span></span> -&gt; <span class="type">String</span>? &#123;</div><div class="line">    <span class="keyword">guard</span> <span class="keyword">let</span> file = openFile(named: filename) <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">return</span> <span class="literal">nil</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">let</span> fileContents = file.read()</div><div class="line">    file.close()</div><div class="line">    <span class="keyword">return</span> fileContents</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">printSomeFile</span><span class="params">()</span></span> &#123;</div><div class="line">    <span class="keyword">let</span> filename = <span class="string">"somefile.txt"</span></div><div class="line">    <span class="keyword">guard</span> <span class="keyword">let</span> fileContents = readFile(named: filename) <span class="keyword">else</span> &#123;</div><div class="line">        <span class="built_in">print</span>(<span class="string">"Unable to open file \(filename)."</span>)</div><div class="line">        <span class="keyword">return</span></div><div class="line">    &#125;</div><div class="line">    <span class="built_in">print</span>(fileContents)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>Instead, we should be using Swift’s <code>try</code>/<code>catch</code> behavior when it is appropriate to know the reason for the failure.</p>
</li>
<li><p>You can use a <code>struct</code> such as the following:</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Error</span>: <span class="title">Swift</span>.<span class="title">Error</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">let</span> file: <span class="type">StaticString</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">let</span> function: <span class="type">StaticString</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">let</span> line: <span class="type">UInt</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">let</span> message: <span class="type">String</span></div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">init</span>(message: <span class="type">String</span>, file: <span class="type">StaticString</span> = #file, function: <span class="type">StaticString</span> = #function, line: <span class="type">UInt</span> = #line) &#123;</div><div class="line">        <span class="keyword">self</span>.file = file</div><div class="line">        <span class="keyword">self</span>.function = function</div><div class="line">        <span class="keyword">self</span>.line = line</div><div class="line">        <span class="keyword">self</span>.message = message</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>Example usage:</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">readFile</span><span class="params">(named filename: String)</span></span> <span class="keyword">throws</span> -&gt; <span class="type">String</span> &#123;</div><div class="line">    <span class="keyword">guard</span> <span class="keyword">let</span> file = openFile(named: filename) <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">throw</span> <span class="type">Error</span>(message: <span class="string">"Unable to open file named \(filename)."</span>)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">let</span> fileContents = file.read()</div><div class="line">    file.close()</div><div class="line">    <span class="keyword">return</span> fileContents</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">printSomeFile</span><span class="params">()</span></span> &#123;</div><div class="line">    <span class="keyword">do</span> &#123;</div><div class="line">        <span class="keyword">let</span> fileContents = <span class="keyword">try</span> readFile(named: filename)</div><div class="line">        <span class="built_in">print</span>(fileContents)</div><div class="line">    &#125; <span class="keyword">catch</span> &#123;</div><div class="line">        <span class="built_in">print</span>(error)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>There are some exceptions in which it does make sense to use an optional as opposed to error handling. When the result should <em>semantically</em> potentially be <code>nil</code> as opposed to something going wrong while retrieving the result, it makes sense to return an optional instead of using error handling.</p>
</li>
<li>In general, if a method can “fail”, and the reason for the failure is not immediately obvious if using an optional return type, it probably makes sense for the method to throw an error.<h3 id="Using-guard-Statements"><a href="#Using-guard-Statements" class="headerlink" title="Using guard Statements"></a>Using <code>guard</code> Statements</h3></li>
<li><p>In general, we prefer to use an “early return” strategy where applicable as opposed to nesting code in <code>if</code> statements. Using <code>guard</code> statements for this use-case is often helpful and can improve the readability of the code.</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// PREFERRED</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">eatDoughnut</span><span class="params">(at index: Int)</span></span> &#123;</div><div class="line">    <span class="keyword">guard</span> index &gt;= <span class="number">0</span> &amp;&amp; index &lt; doughnuts.<span class="built_in">count</span> <span class="keyword">else</span> &#123;</div><div class="line">        <span class="comment">// return early because the index is out of bounds</span></div><div class="line">        <span class="keyword">return</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">let</span> doughnut = doughnuts[index]</div><div class="line">    eat(doughnut)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// NOT PREFERRED</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">eatDoughnut</span><span class="params">(at index: Int)</span></span> &#123;</div><div class="line">    <span class="keyword">if</span> index &gt;= <span class="number">0</span> &amp;&amp; index &lt; doughnuts.<span class="built_in">count</span> &#123;</div><div class="line">        <span class="keyword">let</span> doughnut = doughnuts[index]</div><div class="line">        eat(doughnut)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>When unwrapping optionals, prefer <code>guard</code> statements as opposed to <code>if</code> statements to decrease the amount of nested indentation in your code.</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// PREFERRED</span></div><div class="line"><span class="keyword">guard</span> <span class="keyword">let</span> monkeyIsland = monkeyIsland <span class="keyword">else</span> &#123;</div><div class="line">    <span class="keyword">return</span></div><div class="line">&#125;</div><div class="line">bookVacation(on: monkeyIsland)</div><div class="line">bragAboutVacation(at: monkeyIsland)</div><div class="line"></div><div class="line"><span class="comment">// NOT PREFERRED</span></div><div class="line"><span class="keyword">if</span> <span class="keyword">let</span> monkeyIsland = monkeyIsland &#123;</div><div class="line">    bookVacation(on: monkeyIsland)</div><div class="line">    bragAboutVacation(at: monkeyIsland)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// EVEN LESS PREFERRED</span></div><div class="line"><span class="keyword">if</span> monkeyIsland == <span class="literal">nil</span> &#123;</div><div class="line">    <span class="keyword">return</span></div><div class="line">&#125;</div><div class="line">bookVacation(on: monkeyIsland!)</div><div class="line">bragAboutVacation(at: monkeyIsland!)</div></pre></td></tr></table></figure>
</li>
<li><p>When deciding between using an <code>if</code> statement or a <code>guard</code> statement when unwrapping optionals is <em>not</em> involved, the most important thing to keep in mind is the readability of the code. There are many possible cases here, such as depending on two different booleans, a complicated logical statement involving multiple comparisons, etc., so in general, use your best judgement to write code that is readable and consistent. If you are unsure whether <code>guard</code> or <code>if</code> is more readable or they seem equally readable, prefer using <code>guard</code>.</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// an `if` statement is readable here</span></div><div class="line"><span class="keyword">if</span> operationFailed &#123;</div><div class="line">    <span class="keyword">return</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// a `guard` statement is readable here</span></div><div class="line"><span class="keyword">guard</span> isSuccessful <span class="keyword">else</span> &#123;</div><div class="line">    <span class="keyword">return</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// double negative logic like this can get hard to read - i.e. don't do this</span></div><div class="line"><span class="keyword">guard</span> !operationFailed <span class="keyword">else</span> &#123;</div><div class="line">    <span class="keyword">return</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>If choosing between two different states, it makes more sense to use an <code>if</code> statement as opposed to a <code>guard</code> statement.</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// PREFERRED</span></div><div class="line"><span class="keyword">if</span> isFriendly &#123;</div><div class="line">    <span class="built_in">print</span>(<span class="string">"Hello, nice to meet you!"</span>)</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">    <span class="built_in">print</span>(<span class="string">"You have the manners of a beggar."</span>)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// NOT PREFERRED</span></div><div class="line"><span class="keyword">guard</span> isFriendly <span class="keyword">else</span> &#123;</div><div class="line">    <span class="built_in">print</span>(<span class="string">"You have the manners of a beggar."</span>)</div><div class="line">    <span class="keyword">return</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">print</span>(<span class="string">"Hello, nice to meet you!"</span>)</div></pre></td></tr></table></figure>
</li>
<li><p>You should also use <code>guard</code> only if a failure should result in exiting the current context. Below is an example in which it makes more sense to use two <code>if</code> statements instead of using two <code>guard</code>s - we have two unrelated conditions that should not block one another.</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> <span class="keyword">let</span> monkeyIsland = monkeyIsland &#123;</div><div class="line">    bookVacation(onIsland: monkeyIsland)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">if</span> <span class="keyword">let</span> woodchuck = woodchuck, canChuckWood(woodchuck) &#123;</div><div class="line">    woodchuck.chuckWood()</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>Often, we can run into a situation in which we need to unwrap multiple optionals using <code>guard</code> statements. In general, combine unwraps into a single <code>guard</code> statement if handling the failure of each unwrap is identical (e.g. just a <code>return</code>, <code>break</code>, <code>continue</code>, <code>throw</code>, or some other <code>@noescape</code>).</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// combined because we just return</span></div><div class="line"><span class="keyword">guard</span> <span class="keyword">let</span> thingOne = thingOne,</div><div class="line">    <span class="keyword">let</span> thingTwo = thingTwo,</div><div class="line">    <span class="keyword">let</span> thingThree = thingThree <span class="keyword">else</span> &#123;</div><div class="line">    <span class="keyword">return</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// separate statements because we handle a specific error in each case</span></div><div class="line"><span class="keyword">guard</span> <span class="keyword">let</span> thingOne = thingOne <span class="keyword">else</span> &#123;</div><div class="line">    <span class="keyword">throw</span> <span class="type">Error</span>(message: <span class="string">"Unwrapping thingOne failed."</span>)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">guard</span> <span class="keyword">let</span> thingTwo = thingTwo <span class="keyword">else</span> &#123;</div><div class="line">    <span class="keyword">throw</span> <span class="type">Error</span>(message: <span class="string">"Unwrapping thingTwo failed."</span>)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">guard</span> <span class="keyword">let</span> thingThree = thingThree <span class="keyword">else</span> &#123;</div><div class="line">    <span class="keyword">throw</span> <span class="type">Error</span>(message: <span class="string">"Unwrapping thingThree failed."</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>Don’t use one-liners for <code>guard</code> statements.</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// PREFERRED</span></div><div class="line"><span class="keyword">guard</span> <span class="keyword">let</span> thingOne = thingOne <span class="keyword">else</span> &#123;</div><div class="line">    <span class="keyword">return</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// NOT PREFERRED</span></div><div class="line"><span class="keyword">guard</span> <span class="keyword">let</span> thingOne = thingOne <span class="keyword">else</span> &#123; <span class="keyword">return</span> &#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="Documentation-Comments"><a href="#Documentation-Comments" class="headerlink" title="Documentation/Comments"></a>Documentation/Comments</h2><h3 id="Documentation"><a href="#Documentation" class="headerlink" title="Documentation"></a>Documentation</h3><p>If a function is more complicated than a simple O(1) operation, you should generally consider adding a doc comment for the function since there could be some information that the method signature does not make immediately obvious. If there are any quirks to the way that something was implemented, whether technically interesting, tricky, not obvious, etc., this should be documented. Documentation should be added for complex classes/structs/enums/protocols and properties. All <code>public</code> functions/classes/properties/constants/structs/enums/protocols/etc. should be documented as well (provided, again, that their signature/name does not make their meaning/functionality immediately obvious).<br>After writing a doc comment, you should option click the function/property/class/etc. to make sure that everything is formatted correctly.<br>Be sure to check out the full set of features available in Swift’s comment markup <a href="https://developer.apple.com/library/tvos/documentation/Xcode/Reference/xcode_markup_formatting_ref/Attention.html#//apple_ref/doc/uid/TP40016497-CH29-SW1" target="_blank" rel="external">described in Apple’s Documentation</a>.<br>Guidelines:</p>
<ul>
<li>160 character column limit (like the rest of the code).</li>
<li>Even if the doc comment takes up one line, use block (<code>/** */</code>).</li>
<li>Do not prefix each additional line with a <code>*</code>.</li>
<li>Use the new <code>- parameter</code> syntax as opposed to the old <code>:param:</code> syntax (make sure to use lower case <code>parameter</code> and not <code>Parameter</code>). See <a href="https://developer.apple.com/library/watchos/documentation/Xcode/Reference/xcode_markup_formatting_ref/" target="_blank" rel="external">the documentation on Swift Markup</a> for more details on how this is formatted.</li>
<li>If you’re going to be documenting the parameters/returns/throws of a method, document all of them, even if some of the documentation ends up being somewhat repetitive (this is preferable to having the documentation look incomplete). Sometimes, if only a single parameter warrants documentation, it might be better to just mention it in the description instead.</li>
<li><p>For complicated classes, describe the usage of the class with some potential examples as seems appropriate. Remember that markdown syntax is valid in Swift’s comment docs. Newlines, lists, etc. are therefore appropriate.</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> ## Feature Support</div><div class="line"></div><div class="line"> This class does some awesome things. It supports:</div><div class="line"></div><div class="line"> - Feature 1</div><div class="line"> - Feature 2</div><div class="line"> - Feature 3</div><div class="line"></div><div class="line"> ## Examples</div><div class="line"></div><div class="line"> Here is an example use case indented by four spaces because that indicates a</div><div class="line"> code block:</div><div class="line"></div><div class="line">     let myAwesomeThing = MyAwesomeClass()</div><div class="line">     myAwesomeThing.makeMoney()</div><div class="line"></div><div class="line"> ## Warnings</div><div class="line"></div><div class="line"> There are some things you should be careful of:</div><div class="line"></div><div class="line"> 1. Thing one</div><div class="line"> 2. Thing two</div><div class="line"> 3. Thing three</div><div class="line"> */</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyAwesomeClass</span> </span>&#123;</div><div class="line">    <span class="comment">/* ... */</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>When mentioning code, use code ticks - `</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> This does something with a `UIViewController`, perchance.</div><div class="line"> - warning: Make sure that `someValue` is `true` before running this function.</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">myFunction</span><span class="params">()</span></span> &#123;</div><div class="line">    <span class="comment">/* ... */</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>When writing doc comments, prefer brevity where possible.</p>
<h3 id="Other-Commenting-Guidelines"><a href="#Other-Commenting-Guidelines" class="headerlink" title="Other Commenting Guidelines"></a>Other Commenting Guidelines</h3></li>
<li>Always leave a space after <code>//</code>.</li>
<li>Always leave comments on their own line.</li>
<li>When using <code>// MARK: - whatever</code>, leave a newline after the comment.<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Pirate</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">// MARK: - instance properties</span></div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">let</span> pirateName: <span class="type">String</span></div><div class="line"></div><div class="line">    <span class="comment">// MARK: - initialization</span></div><div class="line"></div><div class="line">    <span class="keyword">init</span>() &#123;</div><div class="line">        <span class="comment">/* ... */</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;This-is-LinkedIn’s-Official-Swift-Style-Guide&quot;&gt;&lt;a href=&quot;#This-is-LinkedIn’s-Official-Swift-Style-Guide&quot; class=&quot;headerlink&quot; title=&quot;Th
    
    </summary>
    
    
      <category term="swift" scheme="http://yoursite.com/tags/swift/"/>
    
  </entry>
  
</feed>
